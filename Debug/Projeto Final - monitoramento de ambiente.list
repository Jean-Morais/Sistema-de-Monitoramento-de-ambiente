
Projeto Final - monitoramento de ambiente.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001694  08000130  08000130  00001130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  080017c4  080017c4  000027c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001828  08001828  00003050  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08001828  08001828  00003050  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08001828  08001828  00003050  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001828  08001828  00002828  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800182c  0800182c  0000282c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000050  20000000  08001830  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000188  20000050  08001880  00003050  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001d8  08001880  000031d8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00003050  2**0
                  CONTENTS, READONLY
 12 .debug_info   000019e3  00000000  00000000  00003079  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000bd7  00000000  00000000  00004a5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000230  00000000  00000000  00005638  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000175  00000000  00000000  00005868  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000118a2  00000000  00000000  000059dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00003e05  00000000  00000000  0001727f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00058d3c  00000000  00000000  0001b084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00073dc0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000b1c  00000000  00000000  00073e04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000078  00000000  00000000  00074920  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	@ (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	@ (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	@ (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000050 	.word	0x20000050
 800014c:	00000000 	.word	0x00000000
 8000150:	080017ac 	.word	0x080017ac

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	@ (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	@ (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	@ (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000054 	.word	0x20000054
 800016c:	080017ac 	.word	0x080017ac

08000170 <BMP280_WriteReg>:
int16_t  dig_T2, dig_T3;
uint16_t dig_P1;
int16_t  dig_P2, dig_P3, dig_P4, dig_P5, dig_P6, dig_P7, dig_P8, dig_P9;
int32_t  t_fine;

void BMP280_WriteReg(uint8_t reg, uint8_t value) {
 8000170:	b580      	push	{r7, lr}
 8000172:	b082      	sub	sp, #8
 8000174:	af00      	add	r7, sp, #0
 8000176:	4603      	mov	r3, r0
 8000178:	460a      	mov	r2, r1
 800017a:	71fb      	strb	r3, [r7, #7]
 800017c:	4613      	mov	r3, r2
 800017e:	71bb      	strb	r3, [r7, #6]
    I2C1_Start();
 8000180:	f000 f982 	bl	8000488 <I2C1_Start>
    I2C1_Address(BMP280_ADDR << 1 | 0);
 8000184:	20ee      	movs	r0, #238	@ 0xee
 8000186:	f000 f9a3 	bl	80004d0 <I2C1_Address>
    I2C1_Write(reg);
 800018a:	79fb      	ldrb	r3, [r7, #7]
 800018c:	4618      	mov	r0, r3
 800018e:	f000 f9b9 	bl	8000504 <I2C1_Write>
    I2C1_Write(value);
 8000192:	79bb      	ldrb	r3, [r7, #6]
 8000194:	4618      	mov	r0, r3
 8000196:	f000 f9b5 	bl	8000504 <I2C1_Write>
    I2C1_Stop();
 800019a:	f000 f98b 	bl	80004b4 <I2C1_Stop>
}
 800019e:	bf00      	nop
 80001a0:	3708      	adds	r7, #8
 80001a2:	46bd      	mov	sp, r7
 80001a4:	bd80      	pop	{r7, pc}

080001a6 <BMP280_ReadRegMulti>:

void BMP280_ReadRegMulti(uint8_t reg, uint8_t* buf, uint8_t len) {
 80001a6:	b590      	push	{r4, r7, lr}
 80001a8:	b085      	sub	sp, #20
 80001aa:	af00      	add	r7, sp, #0
 80001ac:	4603      	mov	r3, r0
 80001ae:	6039      	str	r1, [r7, #0]
 80001b0:	71fb      	strb	r3, [r7, #7]
 80001b2:	4613      	mov	r3, r2
 80001b4:	71bb      	strb	r3, [r7, #6]
    I2C1_Start();
 80001b6:	f000 f967 	bl	8000488 <I2C1_Start>
    I2C1_Address(BMP280_ADDR << 1 | 0);
 80001ba:	20ee      	movs	r0, #238	@ 0xee
 80001bc:	f000 f988 	bl	80004d0 <I2C1_Address>
    I2C1_Write(reg);
 80001c0:	79fb      	ldrb	r3, [r7, #7]
 80001c2:	4618      	mov	r0, r3
 80001c4:	f000 f99e 	bl	8000504 <I2C1_Write>

    I2C1_Start();  // Repeated start
 80001c8:	f000 f95e 	bl	8000488 <I2C1_Start>
    I2C1_Address(BMP280_ADDR << 1 | 1);
 80001cc:	20ef      	movs	r0, #239	@ 0xef
 80001ce:	f000 f97f 	bl	80004d0 <I2C1_Address>

    for (uint8_t i = 0; i < len; i++) {
 80001d2:	2300      	movs	r3, #0
 80001d4:	73fb      	strb	r3, [r7, #15]
 80001d6:	e013      	b.n	8000200 <BMP280_ReadRegMulti+0x5a>
        buf[i] = I2C1_Read(i < (len - 1));  // ACK until last
 80001d8:	7bfa      	ldrb	r2, [r7, #15]
 80001da:	79bb      	ldrb	r3, [r7, #6]
 80001dc:	3b01      	subs	r3, #1
 80001de:	429a      	cmp	r2, r3
 80001e0:	bfb4      	ite	lt
 80001e2:	2301      	movlt	r3, #1
 80001e4:	2300      	movge	r3, #0
 80001e6:	b2db      	uxtb	r3, r3
 80001e8:	4619      	mov	r1, r3
 80001ea:	7bfb      	ldrb	r3, [r7, #15]
 80001ec:	683a      	ldr	r2, [r7, #0]
 80001ee:	18d4      	adds	r4, r2, r3
 80001f0:	4608      	mov	r0, r1
 80001f2:	f000 f9a5 	bl	8000540 <I2C1_Read>
 80001f6:	4603      	mov	r3, r0
 80001f8:	7023      	strb	r3, [r4, #0]
    for (uint8_t i = 0; i < len; i++) {
 80001fa:	7bfb      	ldrb	r3, [r7, #15]
 80001fc:	3301      	adds	r3, #1
 80001fe:	73fb      	strb	r3, [r7, #15]
 8000200:	7bfa      	ldrb	r2, [r7, #15]
 8000202:	79bb      	ldrb	r3, [r7, #6]
 8000204:	429a      	cmp	r2, r3
 8000206:	d3e7      	bcc.n	80001d8 <BMP280_ReadRegMulti+0x32>
    }

    I2C1_Stop();
 8000208:	f000 f954 	bl	80004b4 <I2C1_Stop>
}
 800020c:	bf00      	nop
 800020e:	3714      	adds	r7, #20
 8000210:	46bd      	mov	sp, r7
 8000212:	bd90      	pop	{r4, r7, pc}

08000214 <BMP280_ReadCalibration>:

void BMP280_ReadCalibration(void) {
 8000214:	b580      	push	{r7, lr}
 8000216:	b086      	sub	sp, #24
 8000218:	af00      	add	r7, sp, #0
    uint8_t calib[24];
    BMP280_ReadRegMulti(BMP280_REG_CALIB, calib, 24);
 800021a:	463b      	mov	r3, r7
 800021c:	2218      	movs	r2, #24
 800021e:	4619      	mov	r1, r3
 8000220:	2088      	movs	r0, #136	@ 0x88
 8000222:	f7ff ffc0 	bl	80001a6 <BMP280_ReadRegMulti>

    dig_T1 = (uint16_t)(calib[1] << 8 | calib[0]);
 8000226:	787b      	ldrb	r3, [r7, #1]
 8000228:	b21b      	sxth	r3, r3
 800022a:	021b      	lsls	r3, r3, #8
 800022c:	b21a      	sxth	r2, r3
 800022e:	783b      	ldrb	r3, [r7, #0]
 8000230:	b21b      	sxth	r3, r3
 8000232:	4313      	orrs	r3, r2
 8000234:	b21b      	sxth	r3, r3
 8000236:	b29a      	uxth	r2, r3
 8000238:	4b3a      	ldr	r3, [pc, #232]	@ (8000324 <BMP280_ReadCalibration+0x110>)
 800023a:	801a      	strh	r2, [r3, #0]
    dig_T2 = (int16_t)(calib[3] << 8 | calib[2]);
 800023c:	78fb      	ldrb	r3, [r7, #3]
 800023e:	b21b      	sxth	r3, r3
 8000240:	021b      	lsls	r3, r3, #8
 8000242:	b21a      	sxth	r2, r3
 8000244:	78bb      	ldrb	r3, [r7, #2]
 8000246:	b21b      	sxth	r3, r3
 8000248:	4313      	orrs	r3, r2
 800024a:	b21a      	sxth	r2, r3
 800024c:	4b36      	ldr	r3, [pc, #216]	@ (8000328 <BMP280_ReadCalibration+0x114>)
 800024e:	801a      	strh	r2, [r3, #0]
    dig_T3 = (int16_t)(calib[5] << 8 | calib[4]);
 8000250:	797b      	ldrb	r3, [r7, #5]
 8000252:	b21b      	sxth	r3, r3
 8000254:	021b      	lsls	r3, r3, #8
 8000256:	b21a      	sxth	r2, r3
 8000258:	793b      	ldrb	r3, [r7, #4]
 800025a:	b21b      	sxth	r3, r3
 800025c:	4313      	orrs	r3, r2
 800025e:	b21a      	sxth	r2, r3
 8000260:	4b32      	ldr	r3, [pc, #200]	@ (800032c <BMP280_ReadCalibration+0x118>)
 8000262:	801a      	strh	r2, [r3, #0]
    dig_P1 = (uint16_t)(calib[7] << 8 | calib[6]);
 8000264:	79fb      	ldrb	r3, [r7, #7]
 8000266:	b21b      	sxth	r3, r3
 8000268:	021b      	lsls	r3, r3, #8
 800026a:	b21a      	sxth	r2, r3
 800026c:	79bb      	ldrb	r3, [r7, #6]
 800026e:	b21b      	sxth	r3, r3
 8000270:	4313      	orrs	r3, r2
 8000272:	b21b      	sxth	r3, r3
 8000274:	b29a      	uxth	r2, r3
 8000276:	4b2e      	ldr	r3, [pc, #184]	@ (8000330 <BMP280_ReadCalibration+0x11c>)
 8000278:	801a      	strh	r2, [r3, #0]
    dig_P2 = (int16_t)(calib[9] << 8 | calib[8]);
 800027a:	7a7b      	ldrb	r3, [r7, #9]
 800027c:	b21b      	sxth	r3, r3
 800027e:	021b      	lsls	r3, r3, #8
 8000280:	b21a      	sxth	r2, r3
 8000282:	7a3b      	ldrb	r3, [r7, #8]
 8000284:	b21b      	sxth	r3, r3
 8000286:	4313      	orrs	r3, r2
 8000288:	b21a      	sxth	r2, r3
 800028a:	4b2a      	ldr	r3, [pc, #168]	@ (8000334 <BMP280_ReadCalibration+0x120>)
 800028c:	801a      	strh	r2, [r3, #0]
    dig_P3 = (int16_t)(calib[11] << 8 | calib[10]);
 800028e:	7afb      	ldrb	r3, [r7, #11]
 8000290:	b21b      	sxth	r3, r3
 8000292:	021b      	lsls	r3, r3, #8
 8000294:	b21a      	sxth	r2, r3
 8000296:	7abb      	ldrb	r3, [r7, #10]
 8000298:	b21b      	sxth	r3, r3
 800029a:	4313      	orrs	r3, r2
 800029c:	b21a      	sxth	r2, r3
 800029e:	4b26      	ldr	r3, [pc, #152]	@ (8000338 <BMP280_ReadCalibration+0x124>)
 80002a0:	801a      	strh	r2, [r3, #0]
    dig_P4 = (int16_t)(calib[13] << 8 | calib[12]);
 80002a2:	7b7b      	ldrb	r3, [r7, #13]
 80002a4:	b21b      	sxth	r3, r3
 80002a6:	021b      	lsls	r3, r3, #8
 80002a8:	b21a      	sxth	r2, r3
 80002aa:	7b3b      	ldrb	r3, [r7, #12]
 80002ac:	b21b      	sxth	r3, r3
 80002ae:	4313      	orrs	r3, r2
 80002b0:	b21a      	sxth	r2, r3
 80002b2:	4b22      	ldr	r3, [pc, #136]	@ (800033c <BMP280_ReadCalibration+0x128>)
 80002b4:	801a      	strh	r2, [r3, #0]
    dig_P5 = (int16_t)(calib[15] << 8 | calib[14]);
 80002b6:	7bfb      	ldrb	r3, [r7, #15]
 80002b8:	b21b      	sxth	r3, r3
 80002ba:	021b      	lsls	r3, r3, #8
 80002bc:	b21a      	sxth	r2, r3
 80002be:	7bbb      	ldrb	r3, [r7, #14]
 80002c0:	b21b      	sxth	r3, r3
 80002c2:	4313      	orrs	r3, r2
 80002c4:	b21a      	sxth	r2, r3
 80002c6:	4b1e      	ldr	r3, [pc, #120]	@ (8000340 <BMP280_ReadCalibration+0x12c>)
 80002c8:	801a      	strh	r2, [r3, #0]
    dig_P6 = (int16_t)(calib[17] << 8 | calib[16]);
 80002ca:	7c7b      	ldrb	r3, [r7, #17]
 80002cc:	b21b      	sxth	r3, r3
 80002ce:	021b      	lsls	r3, r3, #8
 80002d0:	b21a      	sxth	r2, r3
 80002d2:	7c3b      	ldrb	r3, [r7, #16]
 80002d4:	b21b      	sxth	r3, r3
 80002d6:	4313      	orrs	r3, r2
 80002d8:	b21a      	sxth	r2, r3
 80002da:	4b1a      	ldr	r3, [pc, #104]	@ (8000344 <BMP280_ReadCalibration+0x130>)
 80002dc:	801a      	strh	r2, [r3, #0]
    dig_P7 = (int16_t)(calib[19] << 8 | calib[18]);
 80002de:	7cfb      	ldrb	r3, [r7, #19]
 80002e0:	b21b      	sxth	r3, r3
 80002e2:	021b      	lsls	r3, r3, #8
 80002e4:	b21a      	sxth	r2, r3
 80002e6:	7cbb      	ldrb	r3, [r7, #18]
 80002e8:	b21b      	sxth	r3, r3
 80002ea:	4313      	orrs	r3, r2
 80002ec:	b21a      	sxth	r2, r3
 80002ee:	4b16      	ldr	r3, [pc, #88]	@ (8000348 <BMP280_ReadCalibration+0x134>)
 80002f0:	801a      	strh	r2, [r3, #0]
    dig_P8 = (int16_t)(calib[21] << 8 | calib[20]);
 80002f2:	7d7b      	ldrb	r3, [r7, #21]
 80002f4:	b21b      	sxth	r3, r3
 80002f6:	021b      	lsls	r3, r3, #8
 80002f8:	b21a      	sxth	r2, r3
 80002fa:	7d3b      	ldrb	r3, [r7, #20]
 80002fc:	b21b      	sxth	r3, r3
 80002fe:	4313      	orrs	r3, r2
 8000300:	b21a      	sxth	r2, r3
 8000302:	4b12      	ldr	r3, [pc, #72]	@ (800034c <BMP280_ReadCalibration+0x138>)
 8000304:	801a      	strh	r2, [r3, #0]
    dig_P9 = (int16_t)(calib[23] << 8 | calib[22]);
 8000306:	7dfb      	ldrb	r3, [r7, #23]
 8000308:	b21b      	sxth	r3, r3
 800030a:	021b      	lsls	r3, r3, #8
 800030c:	b21a      	sxth	r2, r3
 800030e:	7dbb      	ldrb	r3, [r7, #22]
 8000310:	b21b      	sxth	r3, r3
 8000312:	4313      	orrs	r3, r2
 8000314:	b21a      	sxth	r2, r3
 8000316:	4b0e      	ldr	r3, [pc, #56]	@ (8000350 <BMP280_ReadCalibration+0x13c>)
 8000318:	801a      	strh	r2, [r3, #0]
}
 800031a:	bf00      	nop
 800031c:	3718      	adds	r7, #24
 800031e:	46bd      	mov	sp, r7
 8000320:	bd80      	pop	{r7, pc}
 8000322:	bf00      	nop
 8000324:	2000006c 	.word	0x2000006c
 8000328:	2000006e 	.word	0x2000006e
 800032c:	20000070 	.word	0x20000070
 8000330:	20000072 	.word	0x20000072
 8000334:	20000074 	.word	0x20000074
 8000338:	20000076 	.word	0x20000076
 800033c:	20000078 	.word	0x20000078
 8000340:	2000007a 	.word	0x2000007a
 8000344:	2000007c 	.word	0x2000007c
 8000348:	2000007e 	.word	0x2000007e
 800034c:	20000080 	.word	0x20000080
 8000350:	20000082 	.word	0x20000082

08000354 <BMP280_Init>:

void BMP280_Init(void) {
 8000354:	b580      	push	{r7, lr}
 8000356:	af00      	add	r7, sp, #0
    BMP280_WriteReg(BMP280_REG_CONTROL, 0x27);  // temp & press oversampling x1, mode normal
 8000358:	2127      	movs	r1, #39	@ 0x27
 800035a:	20f4      	movs	r0, #244	@ 0xf4
 800035c:	f7ff ff08 	bl	8000170 <BMP280_WriteReg>
    BMP280_WriteReg(BMP280_REG_CONFIG, 0xA0);   // Standby 1000ms, filter off
 8000360:	21a0      	movs	r1, #160	@ 0xa0
 8000362:	20f5      	movs	r0, #245	@ 0xf5
 8000364:	f7ff ff04 	bl	8000170 <BMP280_WriteReg>
    BMP280_ReadCalibration();
 8000368:	f7ff ff54 	bl	8000214 <BMP280_ReadCalibration>
}
 800036c:	bf00      	nop
 800036e:	bd80      	pop	{r7, pc}

08000370 <BMP280_ReadTemperature>:

int32_t BMP280_ReadTemperature(uint8_t* data) {
 8000370:	b580      	push	{r7, lr}
 8000372:	b086      	sub	sp, #24
 8000374:	af00      	add	r7, sp, #0
 8000376:	6078      	str	r0, [r7, #4]
    BMP280_ReadRegMulti(BMP280_REG_TEMP_MSB, data, 3);
 8000378:	2203      	movs	r2, #3
 800037a:	6879      	ldr	r1, [r7, #4]
 800037c:	20fa      	movs	r0, #250	@ 0xfa
 800037e:	f7ff ff12 	bl	80001a6 <BMP280_ReadRegMulti>

    int32_t adc_T = (int32_t)(((uint32_t)(data[0]) << 12) | ((uint32_t)(data[1]) << 4) | ((data[2] >> 4)));
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	781b      	ldrb	r3, [r3, #0]
 8000386:	031a      	lsls	r2, r3, #12
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	3301      	adds	r3, #1
 800038c:	781b      	ldrb	r3, [r3, #0]
 800038e:	011b      	lsls	r3, r3, #4
 8000390:	4313      	orrs	r3, r2
 8000392:	687a      	ldr	r2, [r7, #4]
 8000394:	3202      	adds	r2, #2
 8000396:	7812      	ldrb	r2, [r2, #0]
 8000398:	0912      	lsrs	r2, r2, #4
 800039a:	b2d2      	uxtb	r2, r2
 800039c:	4313      	orrs	r3, r2
 800039e:	617b      	str	r3, [r7, #20]

    int32_t var1 = ((((adc_T >> 3) - ((int32_t)dig_T1 << 1))) * ((int32_t)dig_T2)) >> 11;
 80003a0:	697b      	ldr	r3, [r7, #20]
 80003a2:	10da      	asrs	r2, r3, #3
 80003a4:	4b18      	ldr	r3, [pc, #96]	@ (8000408 <BMP280_ReadTemperature+0x98>)
 80003a6:	881b      	ldrh	r3, [r3, #0]
 80003a8:	005b      	lsls	r3, r3, #1
 80003aa:	1ad3      	subs	r3, r2, r3
 80003ac:	4a17      	ldr	r2, [pc, #92]	@ (800040c <BMP280_ReadTemperature+0x9c>)
 80003ae:	f9b2 2000 	ldrsh.w	r2, [r2]
 80003b2:	fb02 f303 	mul.w	r3, r2, r3
 80003b6:	12db      	asrs	r3, r3, #11
 80003b8:	613b      	str	r3, [r7, #16]
    int32_t var2 = (((((adc_T >> 4) - ((int32_t)dig_T1)) * ((adc_T >> 4) - ((int32_t)dig_T1))) >> 12) * ((int32_t)dig_T3)) >> 14;
 80003ba:	697b      	ldr	r3, [r7, #20]
 80003bc:	111b      	asrs	r3, r3, #4
 80003be:	4a12      	ldr	r2, [pc, #72]	@ (8000408 <BMP280_ReadTemperature+0x98>)
 80003c0:	8812      	ldrh	r2, [r2, #0]
 80003c2:	1a9b      	subs	r3, r3, r2
 80003c4:	697a      	ldr	r2, [r7, #20]
 80003c6:	1112      	asrs	r2, r2, #4
 80003c8:	490f      	ldr	r1, [pc, #60]	@ (8000408 <BMP280_ReadTemperature+0x98>)
 80003ca:	8809      	ldrh	r1, [r1, #0]
 80003cc:	1a52      	subs	r2, r2, r1
 80003ce:	fb02 f303 	mul.w	r3, r2, r3
 80003d2:	131b      	asrs	r3, r3, #12
 80003d4:	4a0e      	ldr	r2, [pc, #56]	@ (8000410 <BMP280_ReadTemperature+0xa0>)
 80003d6:	f9b2 2000 	ldrsh.w	r2, [r2]
 80003da:	fb02 f303 	mul.w	r3, r2, r3
 80003de:	139b      	asrs	r3, r3, #14
 80003e0:	60fb      	str	r3, [r7, #12]

    t_fine = var1 + var2;
 80003e2:	693a      	ldr	r2, [r7, #16]
 80003e4:	68fb      	ldr	r3, [r7, #12]
 80003e6:	4413      	add	r3, r2
 80003e8:	4a0a      	ldr	r2, [pc, #40]	@ (8000414 <BMP280_ReadTemperature+0xa4>)
 80003ea:	6013      	str	r3, [r2, #0]
    int32_t T = (t_fine * 5 + 128) >> 8;
 80003ec:	4b09      	ldr	r3, [pc, #36]	@ (8000414 <BMP280_ReadTemperature+0xa4>)
 80003ee:	681a      	ldr	r2, [r3, #0]
 80003f0:	4613      	mov	r3, r2
 80003f2:	009b      	lsls	r3, r3, #2
 80003f4:	4413      	add	r3, r2
 80003f6:	3380      	adds	r3, #128	@ 0x80
 80003f8:	121b      	asrs	r3, r3, #8
 80003fa:	60bb      	str	r3, [r7, #8]

    return T;  // Em décimos de grau Celsius (ex: 256 = 25.6°C)
 80003fc:	68bb      	ldr	r3, [r7, #8]
}
 80003fe:	4618      	mov	r0, r3
 8000400:	3718      	adds	r7, #24
 8000402:	46bd      	mov	sp, r7
 8000404:	bd80      	pop	{r7, pc}
 8000406:	bf00      	nop
 8000408:	2000006c 	.word	0x2000006c
 800040c:	2000006e 	.word	0x2000006e
 8000410:	20000070 	.word	0x20000070
 8000414:	20000084 	.word	0x20000084

08000418 <I2C1_Init>:
 */

#include "stm32f1xx.h"
#include "I2C.h"

void I2C1_Init(void) {
 8000418:	b480      	push	{r7}
 800041a:	af00      	add	r7, sp, #0
	RCC->APB1RSTR |= RCC_APB1RSTR_I2C1RST;
 800041c:	4b18      	ldr	r3, [pc, #96]	@ (8000480 <I2C1_Init+0x68>)
 800041e:	691b      	ldr	r3, [r3, #16]
 8000420:	4a17      	ldr	r2, [pc, #92]	@ (8000480 <I2C1_Init+0x68>)
 8000422:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000426:	6113      	str	r3, [r2, #16]
	RCC->APB1RSTR &= ~RCC_APB1RSTR_I2C1RST;
 8000428:	4b15      	ldr	r3, [pc, #84]	@ (8000480 <I2C1_Init+0x68>)
 800042a:	691b      	ldr	r3, [r3, #16]
 800042c:	4a14      	ldr	r2, [pc, #80]	@ (8000480 <I2C1_Init+0x68>)
 800042e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8000432:	6113      	str	r3, [r2, #16]
	I2C1->CR1 &= ~I2C_CR1_PE;
 8000434:	4b13      	ldr	r3, [pc, #76]	@ (8000484 <I2C1_Init+0x6c>)
 8000436:	681b      	ldr	r3, [r3, #0]
 8000438:	4a12      	ldr	r2, [pc, #72]	@ (8000484 <I2C1_Init+0x6c>)
 800043a:	f023 0301 	bic.w	r3, r3, #1
 800043e:	6013      	str	r3, [r2, #0]
	I2C1->CR2 = 8;
 8000440:	4b10      	ldr	r3, [pc, #64]	@ (8000484 <I2C1_Init+0x6c>)
 8000442:	2208      	movs	r2, #8
 8000444:	605a      	str	r2, [r3, #4]
	I2C1->CCR = 80;
 8000446:	4b0f      	ldr	r3, [pc, #60]	@ (8000484 <I2C1_Init+0x6c>)
 8000448:	2250      	movs	r2, #80	@ 0x50
 800044a:	61da      	str	r2, [r3, #28]
	I2C1->TRISE = 9;
 800044c:	4b0d      	ldr	r3, [pc, #52]	@ (8000484 <I2C1_Init+0x6c>)
 800044e:	2209      	movs	r2, #9
 8000450:	621a      	str	r2, [r3, #32]
    I2C1->CR1 |= I2C_CR1_ACK;
 8000452:	4b0c      	ldr	r3, [pc, #48]	@ (8000484 <I2C1_Init+0x6c>)
 8000454:	681b      	ldr	r3, [r3, #0]
 8000456:	4a0b      	ldr	r2, [pc, #44]	@ (8000484 <I2C1_Init+0x6c>)
 8000458:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800045c:	6013      	str	r3, [r2, #0]
    I2C1->CR2 |= I2C_CR2_LAST;
 800045e:	4b09      	ldr	r3, [pc, #36]	@ (8000484 <I2C1_Init+0x6c>)
 8000460:	685b      	ldr	r3, [r3, #4]
 8000462:	4a08      	ldr	r2, [pc, #32]	@ (8000484 <I2C1_Init+0x6c>)
 8000464:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000468:	6053      	str	r3, [r2, #4]
    I2C1->CR1 |= I2C_CR1_PE;
 800046a:	4b06      	ldr	r3, [pc, #24]	@ (8000484 <I2C1_Init+0x6c>)
 800046c:	681b      	ldr	r3, [r3, #0]
 800046e:	4a05      	ldr	r2, [pc, #20]	@ (8000484 <I2C1_Init+0x6c>)
 8000470:	f043 0301 	orr.w	r3, r3, #1
 8000474:	6013      	str	r3, [r2, #0]
}
 8000476:	bf00      	nop
 8000478:	46bd      	mov	sp, r7
 800047a:	bc80      	pop	{r7}
 800047c:	4770      	bx	lr
 800047e:	bf00      	nop
 8000480:	40021000 	.word	0x40021000
 8000484:	40005400 	.word	0x40005400

08000488 <I2C1_Start>:

void I2C1_Start(void) {
 8000488:	b480      	push	{r7}
 800048a:	af00      	add	r7, sp, #0
    I2C1->CR1 |= I2C_CR1_START;
 800048c:	4b08      	ldr	r3, [pc, #32]	@ (80004b0 <I2C1_Start+0x28>)
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	4a07      	ldr	r2, [pc, #28]	@ (80004b0 <I2C1_Start+0x28>)
 8000492:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000496:	6013      	str	r3, [r2, #0]
    while (!(I2C1->SR1 & I2C_SR1_SB));
 8000498:	bf00      	nop
 800049a:	4b05      	ldr	r3, [pc, #20]	@ (80004b0 <I2C1_Start+0x28>)
 800049c:	695b      	ldr	r3, [r3, #20]
 800049e:	f003 0301 	and.w	r3, r3, #1
 80004a2:	2b00      	cmp	r3, #0
 80004a4:	d0f9      	beq.n	800049a <I2C1_Start+0x12>
}
 80004a6:	bf00      	nop
 80004a8:	bf00      	nop
 80004aa:	46bd      	mov	sp, r7
 80004ac:	bc80      	pop	{r7}
 80004ae:	4770      	bx	lr
 80004b0:	40005400 	.word	0x40005400

080004b4 <I2C1_Stop>:

void I2C1_Stop(void) {
 80004b4:	b480      	push	{r7}
 80004b6:	af00      	add	r7, sp, #0
    I2C1->CR1 |= I2C_CR1_STOP;
 80004b8:	4b04      	ldr	r3, [pc, #16]	@ (80004cc <I2C1_Stop+0x18>)
 80004ba:	681b      	ldr	r3, [r3, #0]
 80004bc:	4a03      	ldr	r2, [pc, #12]	@ (80004cc <I2C1_Stop+0x18>)
 80004be:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80004c2:	6013      	str	r3, [r2, #0]
}
 80004c4:	bf00      	nop
 80004c6:	46bd      	mov	sp, r7
 80004c8:	bc80      	pop	{r7}
 80004ca:	4770      	bx	lr
 80004cc:	40005400 	.word	0x40005400

080004d0 <I2C1_Address>:

int I2C1_Address(uint8_t addr) {
 80004d0:	b480      	push	{r7}
 80004d2:	b083      	sub	sp, #12
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	4603      	mov	r3, r0
 80004d8:	71fb      	strb	r3, [r7, #7]
    I2C1->DR = addr;
 80004da:	4a09      	ldr	r2, [pc, #36]	@ (8000500 <I2C1_Address+0x30>)
 80004dc:	79fb      	ldrb	r3, [r7, #7]
 80004de:	6113      	str	r3, [r2, #16]
    while (!(I2C1->SR1 & I2C_SR1_ADDR));
 80004e0:	bf00      	nop
 80004e2:	4b07      	ldr	r3, [pc, #28]	@ (8000500 <I2C1_Address+0x30>)
 80004e4:	695b      	ldr	r3, [r3, #20]
 80004e6:	f003 0302 	and.w	r3, r3, #2
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	d0f9      	beq.n	80004e2 <I2C1_Address+0x12>
    (void)I2C1->SR2;
 80004ee:	4b04      	ldr	r3, [pc, #16]	@ (8000500 <I2C1_Address+0x30>)
 80004f0:	699b      	ldr	r3, [r3, #24]
    return 1;
 80004f2:	2301      	movs	r3, #1
}
 80004f4:	4618      	mov	r0, r3
 80004f6:	370c      	adds	r7, #12
 80004f8:	46bd      	mov	sp, r7
 80004fa:	bc80      	pop	{r7}
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop
 8000500:	40005400 	.word	0x40005400

08000504 <I2C1_Write>:

// Escreve um byte no barramento I2C
void I2C1_Write(uint8_t data) {
 8000504:	b480      	push	{r7}
 8000506:	b083      	sub	sp, #12
 8000508:	af00      	add	r7, sp, #0
 800050a:	4603      	mov	r3, r0
 800050c:	71fb      	strb	r3, [r7, #7]
	while (!(I2C1->SR1 & I2C_SR1_TXE));
 800050e:	bf00      	nop
 8000510:	4b0a      	ldr	r3, [pc, #40]	@ (800053c <I2C1_Write+0x38>)
 8000512:	695b      	ldr	r3, [r3, #20]
 8000514:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000518:	2b00      	cmp	r3, #0
 800051a:	d0f9      	beq.n	8000510 <I2C1_Write+0xc>
	I2C1->DR = data;
 800051c:	4a07      	ldr	r2, [pc, #28]	@ (800053c <I2C1_Write+0x38>)
 800051e:	79fb      	ldrb	r3, [r7, #7]
 8000520:	6113      	str	r3, [r2, #16]
	while (!(I2C1->SR1 & I2C_SR1_BTF));
 8000522:	bf00      	nop
 8000524:	4b05      	ldr	r3, [pc, #20]	@ (800053c <I2C1_Write+0x38>)
 8000526:	695b      	ldr	r3, [r3, #20]
 8000528:	f003 0304 	and.w	r3, r3, #4
 800052c:	2b00      	cmp	r3, #0
 800052e:	d0f9      	beq.n	8000524 <I2C1_Write+0x20>
}
 8000530:	bf00      	nop
 8000532:	bf00      	nop
 8000534:	370c      	adds	r7, #12
 8000536:	46bd      	mov	sp, r7
 8000538:	bc80      	pop	{r7}
 800053a:	4770      	bx	lr
 800053c:	40005400 	.word	0x40005400

08000540 <I2C1_Read>:

// Lê um byte do barramento I2C
uint8_t I2C1_Read(uint8_t ack) {
 8000540:	b480      	push	{r7}
 8000542:	b083      	sub	sp, #12
 8000544:	af00      	add	r7, sp, #0
 8000546:	4603      	mov	r3, r0
 8000548:	71fb      	strb	r3, [r7, #7]
    if (ack) {
 800054a:	79fb      	ldrb	r3, [r7, #7]
 800054c:	2b00      	cmp	r3, #0
 800054e:	d006      	beq.n	800055e <I2C1_Read+0x1e>
        I2C1->CR1 |= I2C_CR1_ACK;
 8000550:	4b0d      	ldr	r3, [pc, #52]	@ (8000588 <I2C1_Read+0x48>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	4a0c      	ldr	r2, [pc, #48]	@ (8000588 <I2C1_Read+0x48>)
 8000556:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800055a:	6013      	str	r3, [r2, #0]
 800055c:	e005      	b.n	800056a <I2C1_Read+0x2a>
    } else {
        I2C1->CR1 &= ~I2C_CR1_ACK;
 800055e:	4b0a      	ldr	r3, [pc, #40]	@ (8000588 <I2C1_Read+0x48>)
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	4a09      	ldr	r2, [pc, #36]	@ (8000588 <I2C1_Read+0x48>)
 8000564:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8000568:	6013      	str	r3, [r2, #0]
    }

    while (!(I2C1->SR1 & I2C_SR1_RXNE));
 800056a:	bf00      	nop
 800056c:	4b06      	ldr	r3, [pc, #24]	@ (8000588 <I2C1_Read+0x48>)
 800056e:	695b      	ldr	r3, [r3, #20]
 8000570:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000574:	2b00      	cmp	r3, #0
 8000576:	d0f9      	beq.n	800056c <I2C1_Read+0x2c>

    return I2C1->DR;
 8000578:	4b03      	ldr	r3, [pc, #12]	@ (8000588 <I2C1_Read+0x48>)
 800057a:	691b      	ldr	r3, [r3, #16]
 800057c:	b2db      	uxtb	r3, r3
}
 800057e:	4618      	mov	r0, r3
 8000580:	370c      	adds	r7, #12
 8000582:	46bd      	mov	sp, r7
 8000584:	bc80      	pop	{r7}
 8000586:	4770      	bx	lr
 8000588:	40005400 	.word	0x40005400

0800058c <enable_gpio>:
#include "stm32f1xx.h"
#include "TIMER.h"
#include "NRF24L01.h"


void enable_gpio(){
 800058c:	b480      	push	{r7}
 800058e:	af00      	add	r7, sp, #0

// SPI_1 mestre --------------------------------------------------------------

	//NSS
	GPIOA->CRL &= 0xFFF0FFFF; // limpa os bits do A4
 8000590:	4b43      	ldr	r3, [pc, #268]	@ (80006a0 <enable_gpio+0x114>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	4a42      	ldr	r2, [pc, #264]	@ (80006a0 <enable_gpio+0x114>)
 8000596:	f423 2370 	bic.w	r3, r3, #983040	@ 0xf0000
 800059a:	6013      	str	r3, [r2, #0]
	GPIOA->CRL |= 0x00020000; // habilita A4 como out push pull
 800059c:	4b40      	ldr	r3, [pc, #256]	@ (80006a0 <enable_gpio+0x114>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	4a3f      	ldr	r2, [pc, #252]	@ (80006a0 <enable_gpio+0x114>)
 80005a2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80005a6:	6013      	str	r3, [r2, #0]

	//SCK
	GPIOA->CRL &= 0xFF0FFFFF; // limpa os bits do A5
 80005a8:	4b3d      	ldr	r3, [pc, #244]	@ (80006a0 <enable_gpio+0x114>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	4a3c      	ldr	r2, [pc, #240]	@ (80006a0 <enable_gpio+0x114>)
 80005ae:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80005b2:	6013      	str	r3, [r2, #0]
	GPIOA->CRL |= 0x00A00000; // habilita A5 como out AF push pull
 80005b4:	4b3a      	ldr	r3, [pc, #232]	@ (80006a0 <enable_gpio+0x114>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	4a39      	ldr	r2, [pc, #228]	@ (80006a0 <enable_gpio+0x114>)
 80005ba:	f443 0320 	orr.w	r3, r3, #10485760	@ 0xa00000
 80005be:	6013      	str	r3, [r2, #0]

	// MISO
	GPIOA->CRL &= 0xF0FFFFFF; // limpa os bits do A6
 80005c0:	4b37      	ldr	r3, [pc, #220]	@ (80006a0 <enable_gpio+0x114>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	4a36      	ldr	r2, [pc, #216]	@ (80006a0 <enable_gpio+0x114>)
 80005c6:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
 80005ca:	6013      	str	r3, [r2, #0]
	GPIOA->CRL |= 0x04000000; // habilita A6 como input floating
 80005cc:	4b34      	ldr	r3, [pc, #208]	@ (80006a0 <enable_gpio+0x114>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	4a33      	ldr	r2, [pc, #204]	@ (80006a0 <enable_gpio+0x114>)
 80005d2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80005d6:	6013      	str	r3, [r2, #0]

	//MOSI
	GPIOA->CRL &= 0x0FFFFFFF; // limpa os bits do A7
 80005d8:	4b31      	ldr	r3, [pc, #196]	@ (80006a0 <enable_gpio+0x114>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	4a30      	ldr	r2, [pc, #192]	@ (80006a0 <enable_gpio+0x114>)
 80005de:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80005e2:	6013      	str	r3, [r2, #0]
	GPIOA->CRL |= 0xA0000000; // habilita A7 como out AF push pull
 80005e4:	4b2e      	ldr	r3, [pc, #184]	@ (80006a0 <enable_gpio+0x114>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	4a2d      	ldr	r2, [pc, #180]	@ (80006a0 <enable_gpio+0x114>)
 80005ea:	f043 4320 	orr.w	r3, r3, #2684354560	@ 0xa0000000
 80005ee:	6013      	str	r3, [r2, #0]

// USART ---------------------------------------------------------------------

	GPIOA->CRH &= ~(0xF << 4);     // Limpa bits de configuração de PA9
 80005f0:	4b2b      	ldr	r3, [pc, #172]	@ (80006a0 <enable_gpio+0x114>)
 80005f2:	685b      	ldr	r3, [r3, #4]
 80005f4:	4a2a      	ldr	r2, [pc, #168]	@ (80006a0 <enable_gpio+0x114>)
 80005f6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80005fa:	6053      	str	r3, [r2, #4]
	GPIOA->CRH |= (0xB << 4);      // 1011 = AF output push-pull, 50 MHz
 80005fc:	4b28      	ldr	r3, [pc, #160]	@ (80006a0 <enable_gpio+0x114>)
 80005fe:	685b      	ldr	r3, [r3, #4]
 8000600:	4a27      	ldr	r2, [pc, #156]	@ (80006a0 <enable_gpio+0x114>)
 8000602:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8000606:	6053      	str	r3, [r2, #4]

	// PA10 (RX) como input floating
	GPIOA->CRH &= ~(0xF << 8);     // Limpa bits de configuração de PA10
 8000608:	4b25      	ldr	r3, [pc, #148]	@ (80006a0 <enable_gpio+0x114>)
 800060a:	685b      	ldr	r3, [r3, #4]
 800060c:	4a24      	ldr	r2, [pc, #144]	@ (80006a0 <enable_gpio+0x114>)
 800060e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8000612:	6053      	str	r3, [r2, #4]
	GPIOA->CRH |= (0x4 << 8);      // 0100 = input floating
 8000614:	4b22      	ldr	r3, [pc, #136]	@ (80006a0 <enable_gpio+0x114>)
 8000616:	685b      	ldr	r3, [r3, #4]
 8000618:	4a21      	ldr	r2, [pc, #132]	@ (80006a0 <enable_gpio+0x114>)
 800061a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800061e:	6053      	str	r3, [r2, #4]

// NRF

	// CSN -> PA12
	GPIOA->CRH &= ~(0xF << 16);     // limpa bits de PA12
 8000620:	4b1f      	ldr	r3, [pc, #124]	@ (80006a0 <enable_gpio+0x114>)
 8000622:	685b      	ldr	r3, [r3, #4]
 8000624:	4a1e      	ldr	r2, [pc, #120]	@ (80006a0 <enable_gpio+0x114>)
 8000626:	f423 2370 	bic.w	r3, r3, #983040	@ 0xf0000
 800062a:	6053      	str	r3, [r2, #4]
	GPIOA->CRH |= (0x2 << 16);      // Output push-pull
 800062c:	4b1c      	ldr	r3, [pc, #112]	@ (80006a0 <enable_gpio+0x114>)
 800062e:	685b      	ldr	r3, [r3, #4]
 8000630:	4a1b      	ldr	r2, [pc, #108]	@ (80006a0 <enable_gpio+0x114>)
 8000632:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000636:	6053      	str	r3, [r2, #4]

	// CE -> PA11
	GPIOA->CRH &= ~(0xF << 12);     // limpa bits de PA11
 8000638:	4b19      	ldr	r3, [pc, #100]	@ (80006a0 <enable_gpio+0x114>)
 800063a:	685b      	ldr	r3, [r3, #4]
 800063c:	4a18      	ldr	r2, [pc, #96]	@ (80006a0 <enable_gpio+0x114>)
 800063e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8000642:	6053      	str	r3, [r2, #4]
	GPIOA->CRH |= (0x2 << 12);      // Output push-pull
 8000644:	4b16      	ldr	r3, [pc, #88]	@ (80006a0 <enable_gpio+0x114>)
 8000646:	685b      	ldr	r3, [r3, #4]
 8000648:	4a15      	ldr	r2, [pc, #84]	@ (80006a0 <enable_gpio+0x114>)
 800064a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800064e:	6053      	str	r3, [r2, #4]


	NRF_CE_LOW();  // CE em LOW
 8000650:	4b13      	ldr	r3, [pc, #76]	@ (80006a0 <enable_gpio+0x114>)
 8000652:	68db      	ldr	r3, [r3, #12]
 8000654:	4a12      	ldr	r2, [pc, #72]	@ (80006a0 <enable_gpio+0x114>)
 8000656:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800065a:	60d3      	str	r3, [r2, #12]
	NRF_CSN_HIGH(); // CSN em HIGH (inativo)
 800065c:	4b10      	ldr	r3, [pc, #64]	@ (80006a0 <enable_gpio+0x114>)
 800065e:	68db      	ldr	r3, [r3, #12]
 8000660:	4a0f      	ldr	r2, [pc, #60]	@ (80006a0 <enable_gpio+0x114>)
 8000662:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000666:	60d3      	str	r3, [r2, #12]

// i2c

	GPIOB->CRL &= ~((0xF << 24) | (0xF << 28));
 8000668:	4b0e      	ldr	r3, [pc, #56]	@ (80006a4 <enable_gpio+0x118>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	4a0d      	ldr	r2, [pc, #52]	@ (80006a4 <enable_gpio+0x118>)
 800066e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8000672:	6013      	str	r3, [r2, #0]
	GPIOB->CRL |=  (0xB << 24) | (0xB << 28);
 8000674:	4b0b      	ldr	r3, [pc, #44]	@ (80006a4 <enable_gpio+0x118>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	4a0a      	ldr	r2, [pc, #40]	@ (80006a4 <enable_gpio+0x118>)
 800067a:	f043 433b 	orr.w	r3, r3, #3137339392	@ 0xbb000000
 800067e:	6013      	str	r3, [r2, #0]

// LED TESTE
	GPIOB->CRH &= 0xFFF0FFFF; // limpa os bits do B12
 8000680:	4b08      	ldr	r3, [pc, #32]	@ (80006a4 <enable_gpio+0x118>)
 8000682:	685b      	ldr	r3, [r3, #4]
 8000684:	4a07      	ldr	r2, [pc, #28]	@ (80006a4 <enable_gpio+0x118>)
 8000686:	f423 2370 	bic.w	r3, r3, #983040	@ 0xf0000
 800068a:	6053      	str	r3, [r2, #4]
	GPIOB->CRH |= 0x00020000; // habilita A4 como out push pull
 800068c:	4b05      	ldr	r3, [pc, #20]	@ (80006a4 <enable_gpio+0x118>)
 800068e:	685b      	ldr	r3, [r3, #4]
 8000690:	4a04      	ldr	r2, [pc, #16]	@ (80006a4 <enable_gpio+0x118>)
 8000692:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000696:	6053      	str	r3, [r2, #4]

}
 8000698:	bf00      	nop
 800069a:	46bd      	mov	sp, r7
 800069c:	bc80      	pop	{r7}
 800069e:	4770      	bx	lr
 80006a0:	40010800 	.word	0x40010800
 80006a4:	40010c00 	.word	0x40010c00

080006a8 <enable_clock>:

void enable_clock(){
 80006a8:	b480      	push	{r7}
 80006aa:	af00      	add	r7, sp, #0
	RCC->APB2ENR |= (1 << 2); //Enable GPIOA Clock A
 80006ac:	4b25      	ldr	r3, [pc, #148]	@ (8000744 <enable_clock+0x9c>)
 80006ae:	699b      	ldr	r3, [r3, #24]
 80006b0:	4a24      	ldr	r2, [pc, #144]	@ (8000744 <enable_clock+0x9c>)
 80006b2:	f043 0304 	orr.w	r3, r3, #4
 80006b6:	6193      	str	r3, [r2, #24]
	RCC->APB2ENR |= (1 << 3); //Enable GPIOC Clock B
 80006b8:	4b22      	ldr	r3, [pc, #136]	@ (8000744 <enable_clock+0x9c>)
 80006ba:	699b      	ldr	r3, [r3, #24]
 80006bc:	4a21      	ldr	r2, [pc, #132]	@ (8000744 <enable_clock+0x9c>)
 80006be:	f043 0308 	orr.w	r3, r3, #8
 80006c2:	6193      	str	r3, [r2, #24]
	RCC->APB2ENR |= (1 << 4); //Enable GPIOC Clock C
 80006c4:	4b1f      	ldr	r3, [pc, #124]	@ (8000744 <enable_clock+0x9c>)
 80006c6:	699b      	ldr	r3, [r3, #24]
 80006c8:	4a1e      	ldr	r2, [pc, #120]	@ (8000744 <enable_clock+0x9c>)
 80006ca:	f043 0310 	orr.w	r3, r3, #16
 80006ce:	6193      	str	r3, [r2, #24]
	RCC->APB2ENR |= (1 << 12); //Enable Clock SPI_1
 80006d0:	4b1c      	ldr	r3, [pc, #112]	@ (8000744 <enable_clock+0x9c>)
 80006d2:	699b      	ldr	r3, [r3, #24]
 80006d4:	4a1b      	ldr	r2, [pc, #108]	@ (8000744 <enable_clock+0x9c>)
 80006d6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80006da:	6193      	str	r3, [r2, #24]
	RCC->APB2ENR |= (1 << 14); //Enable usart1
 80006dc:	4b19      	ldr	r3, [pc, #100]	@ (8000744 <enable_clock+0x9c>)
 80006de:	699b      	ldr	r3, [r3, #24]
 80006e0:	4a18      	ldr	r2, [pc, #96]	@ (8000744 <enable_clock+0x9c>)
 80006e2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006e6:	6193      	str	r3, [r2, #24]
	RCC->APB2ENR |= RCC_APB2ENR_AFIOEN;
 80006e8:	4b16      	ldr	r3, [pc, #88]	@ (8000744 <enable_clock+0x9c>)
 80006ea:	699b      	ldr	r3, [r3, #24]
 80006ec:	4a15      	ldr	r2, [pc, #84]	@ (8000744 <enable_clock+0x9c>)
 80006ee:	f043 0301 	orr.w	r3, r3, #1
 80006f2:	6193      	str	r3, [r2, #24]
	RCC->APB1ENR |= RCC_APB1ENR_I2C1EN;
 80006f4:	4b13      	ldr	r3, [pc, #76]	@ (8000744 <enable_clock+0x9c>)
 80006f6:	69db      	ldr	r3, [r3, #28]
 80006f8:	4a12      	ldr	r2, [pc, #72]	@ (8000744 <enable_clock+0x9c>)
 80006fa:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80006fe:	61d3      	str	r3, [r2, #28]
	RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8000700:	4b10      	ldr	r3, [pc, #64]	@ (8000744 <enable_clock+0x9c>)
 8000702:	69db      	ldr	r3, [r3, #28]
 8000704:	4a0f      	ldr	r2, [pc, #60]	@ (8000744 <enable_clock+0x9c>)
 8000706:	f043 0301 	orr.w	r3, r3, #1
 800070a:	61d3      	str	r3, [r2, #28]
	RCC->APB2ENR |= RCC_APB2ENR_ADC1EN; //Enable ADC1 clock TO LDR
 800070c:	4b0d      	ldr	r3, [pc, #52]	@ (8000744 <enable_clock+0x9c>)
 800070e:	699b      	ldr	r3, [r3, #24]
 8000710:	4a0c      	ldr	r2, [pc, #48]	@ (8000744 <enable_clock+0x9c>)
 8000712:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000716:	6193      	str	r3, [r2, #24]
	RCC->CR |= RCC_CR_HSION; // Liga o HSI (já vem ligado por padrão)
 8000718:	4b0a      	ldr	r3, [pc, #40]	@ (8000744 <enable_clock+0x9c>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	4a09      	ldr	r2, [pc, #36]	@ (8000744 <enable_clock+0x9c>)
 800071e:	f043 0301 	orr.w	r3, r3, #1
 8000722:	6013      	str	r3, [r2, #0]
	while (!(RCC->CR & RCC_CR_HSIRDY)); // Espera HSI estabilizar
 8000724:	bf00      	nop
 8000726:	4b07      	ldr	r3, [pc, #28]	@ (8000744 <enable_clock+0x9c>)
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	f003 0302 	and.w	r3, r3, #2
 800072e:	2b00      	cmp	r3, #0
 8000730:	d0f9      	beq.n	8000726 <enable_clock+0x7e>
	RCC->CFGR |= RCC_CFGR_SW_HSI;
 8000732:	4b04      	ldr	r3, [pc, #16]	@ (8000744 <enable_clock+0x9c>)
 8000734:	4a03      	ldr	r2, [pc, #12]	@ (8000744 <enable_clock+0x9c>)
 8000736:	685b      	ldr	r3, [r3, #4]
 8000738:	6053      	str	r3, [r2, #4]
}
 800073a:	bf00      	nop
 800073c:	46bd      	mov	sp, r7
 800073e:	bc80      	pop	{r7}
 8000740:	4770      	bx	lr
 8000742:	bf00      	nop
 8000744:	40021000 	.word	0x40021000

08000748 <teste>:

void teste(){
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
	delay_us(100000);
 800074c:	4809      	ldr	r0, [pc, #36]	@ (8000774 <teste+0x2c>)
 800074e:	f000 fa37 	bl	8000bc0 <delay_us>
	GPIOB->ODR |= B12;
 8000752:	4b09      	ldr	r3, [pc, #36]	@ (8000778 <teste+0x30>)
 8000754:	68db      	ldr	r3, [r3, #12]
 8000756:	4a08      	ldr	r2, [pc, #32]	@ (8000778 <teste+0x30>)
 8000758:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800075c:	60d3      	str	r3, [r2, #12]
	delay_us(500000);
 800075e:	4807      	ldr	r0, [pc, #28]	@ (800077c <teste+0x34>)
 8000760:	f000 fa2e 	bl	8000bc0 <delay_us>
	GPIOB->ODR &=~B12;
 8000764:	4b04      	ldr	r3, [pc, #16]	@ (8000778 <teste+0x30>)
 8000766:	68db      	ldr	r3, [r3, #12]
 8000768:	4a03      	ldr	r2, [pc, #12]	@ (8000778 <teste+0x30>)
 800076a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800076e:	60d3      	str	r3, [r2, #12]
}
 8000770:	bf00      	nop
 8000772:	bd80      	pop	{r7, pc}
 8000774:	000186a0 	.word	0x000186a0
 8000778:	40010c00 	.word	0x40010c00
 800077c:	0007a120 	.word	0x0007a120

08000780 <enable_LDR>:

#include "stm32f1xx.h"
#include "LDR.h"

//funcções referente ao ldr
void enable_LDR(){
 8000780:	b480      	push	{r7}
 8000782:	af00      	add	r7, sp, #0
	//config do ADC1
	ADC1->CR2 |= (7UL << ADC_CR2_EXTSEL_Pos);
 8000784:	4b07      	ldr	r3, [pc, #28]	@ (80007a4 <enable_LDR+0x24>)
 8000786:	689b      	ldr	r3, [r3, #8]
 8000788:	4a06      	ldr	r2, [pc, #24]	@ (80007a4 <enable_LDR+0x24>)
 800078a:	f443 2360 	orr.w	r3, r3, #917504	@ 0xe0000
 800078e:	6093      	str	r3, [r2, #8]
	ADC1->CR2 |= (ADC_CR2_ADON);
 8000790:	4b04      	ldr	r3, [pc, #16]	@ (80007a4 <enable_LDR+0x24>)
 8000792:	689b      	ldr	r3, [r3, #8]
 8000794:	4a03      	ldr	r2, [pc, #12]	@ (80007a4 <enable_LDR+0x24>)
 8000796:	f043 0301 	orr.w	r3, r3, #1
 800079a:	6093      	str	r3, [r2, #8]
}
 800079c:	bf00      	nop
 800079e:	46bd      	mov	sp, r7
 80007a0:	bc80      	pop	{r7}
 80007a2:	4770      	bx	lr
 80007a4:	40012400 	.word	0x40012400

080007a8 <LDR_read>:

void LDR_read(uint32_t *ldr_Data){
 80007a8:	b480      	push	{r7}
 80007aa:	b083      	sub	sp, #12
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
	//Reset ADC
	ADC1->CR2 |= ADC_CR2_ADON;
 80007b0:	4b0d      	ldr	r3, [pc, #52]	@ (80007e8 <LDR_read+0x40>)
 80007b2:	689b      	ldr	r3, [r3, #8]
 80007b4:	4a0c      	ldr	r2, [pc, #48]	@ (80007e8 <LDR_read+0x40>)
 80007b6:	f043 0301 	orr.w	r3, r3, #1
 80007ba:	6093      	str	r3, [r2, #8]
	//Iniciar conversão do ADC
	ADC1->CR2 |= ADC_CR2_SWSTART;
 80007bc:	4b0a      	ldr	r3, [pc, #40]	@ (80007e8 <LDR_read+0x40>)
 80007be:	689b      	ldr	r3, [r3, #8]
 80007c0:	4a09      	ldr	r2, [pc, #36]	@ (80007e8 <LDR_read+0x40>)
 80007c2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80007c6:	6093      	str	r3, [r2, #8]

	//Esperar pelo EOC
	while(!(ADC1->SR & ADC_SR_EOC));
 80007c8:	bf00      	nop
 80007ca:	4b07      	ldr	r3, [pc, #28]	@ (80007e8 <LDR_read+0x40>)
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	f003 0302 	and.w	r3, r3, #2
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d0f9      	beq.n	80007ca <LDR_read+0x22>

	*ldr_Data = ADC1->DR;
 80007d6:	4b04      	ldr	r3, [pc, #16]	@ (80007e8 <LDR_read+0x40>)
 80007d8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	601a      	str	r2, [r3, #0]
}
 80007de:	bf00      	nop
 80007e0:	370c      	adds	r7, #12
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bc80      	pop	{r7}
 80007e6:	4770      	bx	lr
 80007e8:	40012400 	.word	0x40012400

080007ec <nrf_write_register>:
#include "SPI.h"
#include "TIMER.h"
#include "INIT.h"
#include "USART.h"

void nrf_write_register(uint8_t reg, uint8_t value) {
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b082      	sub	sp, #8
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	4603      	mov	r3, r0
 80007f4:	460a      	mov	r2, r1
 80007f6:	71fb      	strb	r3, [r7, #7]
 80007f8:	4613      	mov	r3, r2
 80007fa:	71bb      	strb	r3, [r7, #6]
    NRF_CSN_LOW();
 80007fc:	4b10      	ldr	r3, [pc, #64]	@ (8000840 <nrf_write_register+0x54>)
 80007fe:	68db      	ldr	r3, [r3, #12]
 8000800:	4a0f      	ldr	r2, [pc, #60]	@ (8000840 <nrf_write_register+0x54>)
 8000802:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000806:	60d3      	str	r3, [r2, #12]
    spi_transfer(SPI1, 0x20 | (reg & 0x1F)); // Comando de escrita
 8000808:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800080c:	f003 031f 	and.w	r3, r3, #31
 8000810:	b25b      	sxtb	r3, r3
 8000812:	f043 0320 	orr.w	r3, r3, #32
 8000816:	b25b      	sxtb	r3, r3
 8000818:	b2db      	uxtb	r3, r3
 800081a:	4619      	mov	r1, r3
 800081c:	4809      	ldr	r0, [pc, #36]	@ (8000844 <nrf_write_register+0x58>)
 800081e:	f000 f95d 	bl	8000adc <spi_transfer>
    spi_transfer(SPI1, value);              // Valor a ser escrito
 8000822:	79bb      	ldrb	r3, [r7, #6]
 8000824:	4619      	mov	r1, r3
 8000826:	4807      	ldr	r0, [pc, #28]	@ (8000844 <nrf_write_register+0x58>)
 8000828:	f000 f958 	bl	8000adc <spi_transfer>
    NRF_CSN_HIGH();
 800082c:	4b04      	ldr	r3, [pc, #16]	@ (8000840 <nrf_write_register+0x54>)
 800082e:	68db      	ldr	r3, [r3, #12]
 8000830:	4a03      	ldr	r2, [pc, #12]	@ (8000840 <nrf_write_register+0x54>)
 8000832:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000836:	60d3      	str	r3, [r2, #12]
}
 8000838:	bf00      	nop
 800083a:	3708      	adds	r7, #8
 800083c:	46bd      	mov	sp, r7
 800083e:	bd80      	pop	{r7, pc}
 8000840:	40010800 	.word	0x40010800
 8000844:	40013000 	.word	0x40013000

08000848 <nrf_config>:

void nrf_config(){
 8000848:	b580      	push	{r7, lr}
 800084a:	b084      	sub	sp, #16
 800084c:	af00      	add	r7, sp, #0

	 nrf_write_register(0x01, 0x00); // habilita En_AA
 800084e:	2100      	movs	r1, #0
 8000850:	2001      	movs	r0, #1
 8000852:	f7ff ffcb 	bl	80007ec <nrf_write_register>
	 nrf_write_register(0x02, 0x01); // habilita
 8000856:	2101      	movs	r1, #1
 8000858:	2002      	movs	r0, #2
 800085a:	f7ff ffc7 	bl	80007ec <nrf_write_register>
	 nrf_write_register(0x03, 0x03); // endereço 5 bytes
 800085e:	2103      	movs	r1, #3
 8000860:	2003      	movs	r0, #3
 8000862:	f7ff ffc3 	bl	80007ec <nrf_write_register>
	 nrf_write_register(0x04, 0xFF); // 250uS 2 retransmissoes
 8000866:	21ff      	movs	r1, #255	@ 0xff
 8000868:	2004      	movs	r0, #4
 800086a:	f7ff ffbf 	bl	80007ec <nrf_write_register>
	 nrf_write_register(0x05, 0x0A); // canal 10
 800086e:	210a      	movs	r1, #10
 8000870:	2005      	movs	r0, #5
 8000872:	f7ff ffbb 	bl	80007ec <nrf_write_register>
	 nrf_write_register(0x06, 0x0E); // RF
 8000876:	210e      	movs	r1, #14
 8000878:	2006      	movs	r0, #6
 800087a:	f7ff ffb7 	bl	80007ec <nrf_write_register>

	 uint8_t addr[5] = {0x03, 0xDD, 0xCC, 0xBB, 0xAA};
 800087e:	4a2a      	ldr	r2, [pc, #168]	@ (8000928 <nrf_config+0xe0>)
 8000880:	463b      	mov	r3, r7
 8000882:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000886:	6018      	str	r0, [r3, #0]
 8000888:	3304      	adds	r3, #4
 800088a:	7019      	strb	r1, [r3, #0]

	 NRF_CSN_LOW();
 800088c:	4b27      	ldr	r3, [pc, #156]	@ (800092c <nrf_config+0xe4>)
 800088e:	68db      	ldr	r3, [r3, #12]
 8000890:	4a26      	ldr	r2, [pc, #152]	@ (800092c <nrf_config+0xe4>)
 8000892:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000896:	60d3      	str	r3, [r2, #12]
	 spi_transfer(SPI1, 0x30); // TX_ADDR
 8000898:	2130      	movs	r1, #48	@ 0x30
 800089a:	4825      	ldr	r0, [pc, #148]	@ (8000930 <nrf_config+0xe8>)
 800089c:	f000 f91e 	bl	8000adc <spi_transfer>
	 for(int i = 0; i < 5; i++) spi_transfer(SPI1, addr[i]);
 80008a0:	2300      	movs	r3, #0
 80008a2:	60fb      	str	r3, [r7, #12]
 80008a4:	e00a      	b.n	80008bc <nrf_config+0x74>
 80008a6:	463a      	mov	r2, r7
 80008a8:	68fb      	ldr	r3, [r7, #12]
 80008aa:	4413      	add	r3, r2
 80008ac:	781b      	ldrb	r3, [r3, #0]
 80008ae:	4619      	mov	r1, r3
 80008b0:	481f      	ldr	r0, [pc, #124]	@ (8000930 <nrf_config+0xe8>)
 80008b2:	f000 f913 	bl	8000adc <spi_transfer>
 80008b6:	68fb      	ldr	r3, [r7, #12]
 80008b8:	3301      	adds	r3, #1
 80008ba:	60fb      	str	r3, [r7, #12]
 80008bc:	68fb      	ldr	r3, [r7, #12]
 80008be:	2b04      	cmp	r3, #4
 80008c0:	ddf1      	ble.n	80008a6 <nrf_config+0x5e>
	 NRF_CSN_HIGH();
 80008c2:	4b1a      	ldr	r3, [pc, #104]	@ (800092c <nrf_config+0xe4>)
 80008c4:	68db      	ldr	r3, [r3, #12]
 80008c6:	4a19      	ldr	r2, [pc, #100]	@ (800092c <nrf_config+0xe4>)
 80008c8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80008cc:	60d3      	str	r3, [r2, #12]

	 NRF_CSN_LOW();
 80008ce:	4b17      	ldr	r3, [pc, #92]	@ (800092c <nrf_config+0xe4>)
 80008d0:	68db      	ldr	r3, [r3, #12]
 80008d2:	4a16      	ldr	r2, [pc, #88]	@ (800092c <nrf_config+0xe4>)
 80008d4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80008d8:	60d3      	str	r3, [r2, #12]
	 spi_transfer(SPI1, 0x0A); // RX_ADDR_P0 (receptor deve escutar neste)
 80008da:	210a      	movs	r1, #10
 80008dc:	4814      	ldr	r0, [pc, #80]	@ (8000930 <nrf_config+0xe8>)
 80008de:	f000 f8fd 	bl	8000adc <spi_transfer>
	 for(int i = 0; i < 5; i++) spi_transfer(SPI1, addr[i]);
 80008e2:	2300      	movs	r3, #0
 80008e4:	60bb      	str	r3, [r7, #8]
 80008e6:	e00a      	b.n	80008fe <nrf_config+0xb6>
 80008e8:	463a      	mov	r2, r7
 80008ea:	68bb      	ldr	r3, [r7, #8]
 80008ec:	4413      	add	r3, r2
 80008ee:	781b      	ldrb	r3, [r3, #0]
 80008f0:	4619      	mov	r1, r3
 80008f2:	480f      	ldr	r0, [pc, #60]	@ (8000930 <nrf_config+0xe8>)
 80008f4:	f000 f8f2 	bl	8000adc <spi_transfer>
 80008f8:	68bb      	ldr	r3, [r7, #8]
 80008fa:	3301      	adds	r3, #1
 80008fc:	60bb      	str	r3, [r7, #8]
 80008fe:	68bb      	ldr	r3, [r7, #8]
 8000900:	2b04      	cmp	r3, #4
 8000902:	ddf1      	ble.n	80008e8 <nrf_config+0xa0>
	 NRF_CSN_HIGH();
 8000904:	4b09      	ldr	r3, [pc, #36]	@ (800092c <nrf_config+0xe4>)
 8000906:	68db      	ldr	r3, [r3, #12]
 8000908:	4a08      	ldr	r2, [pc, #32]	@ (800092c <nrf_config+0xe4>)
 800090a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800090e:	60d3      	str	r3, [r2, #12]


	 nrf_write_register(0x00, 0x02); // PWR_UP=1, PRIM_RX=0
 8000910:	2102      	movs	r1, #2
 8000912:	2000      	movs	r0, #0
 8000914:	f7ff ff6a 	bl	80007ec <nrf_write_register>
	 delay_us(1500); // Esperar estabilização após PWR_UP
 8000918:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 800091c:	f000 f950 	bl	8000bc0 <delay_us>
}
 8000920:	bf00      	nop
 8000922:	3710      	adds	r7, #16
 8000924:	46bd      	mov	sp, r7
 8000926:	bd80      	pop	{r7, pc}
 8000928:	080017c4 	.word	0x080017c4
 800092c:	40010800 	.word	0x40010800
 8000930:	40013000 	.word	0x40013000

08000934 <nrf_read_register>:
    NRF_CSN_LOW();
    spi_transfer(SPI1, cmd);
    NRF_CSN_HIGH();
}

uint8_t nrf_read_register(uint8_t reg) {
 8000934:	b580      	push	{r7, lr}
 8000936:	b084      	sub	sp, #16
 8000938:	af00      	add	r7, sp, #0
 800093a:	4603      	mov	r3, r0
 800093c:	71fb      	strb	r3, [r7, #7]
    NRF_CSN_LOW();
 800093e:	4b0f      	ldr	r3, [pc, #60]	@ (800097c <nrf_read_register+0x48>)
 8000940:	68db      	ldr	r3, [r3, #12]
 8000942:	4a0e      	ldr	r2, [pc, #56]	@ (800097c <nrf_read_register+0x48>)
 8000944:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000948:	60d3      	str	r3, [r2, #12]
    spi_transfer(SPI1, 0x00 | (reg & 0x1F));  // comando de leitura do registrador
 800094a:	79fb      	ldrb	r3, [r7, #7]
 800094c:	f003 031f 	and.w	r3, r3, #31
 8000950:	b2db      	uxtb	r3, r3
 8000952:	4619      	mov	r1, r3
 8000954:	480a      	ldr	r0, [pc, #40]	@ (8000980 <nrf_read_register+0x4c>)
 8000956:	f000 f8c1 	bl	8000adc <spi_transfer>
    uint8_t value = spi_transfer(SPI1, 0xFF); // leitura dummy
 800095a:	21ff      	movs	r1, #255	@ 0xff
 800095c:	4808      	ldr	r0, [pc, #32]	@ (8000980 <nrf_read_register+0x4c>)
 800095e:	f000 f8bd 	bl	8000adc <spi_transfer>
 8000962:	4603      	mov	r3, r0
 8000964:	73fb      	strb	r3, [r7, #15]
    NRF_CSN_HIGH();
 8000966:	4b05      	ldr	r3, [pc, #20]	@ (800097c <nrf_read_register+0x48>)
 8000968:	68db      	ldr	r3, [r3, #12]
 800096a:	4a04      	ldr	r2, [pc, #16]	@ (800097c <nrf_read_register+0x48>)
 800096c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000970:	60d3      	str	r3, [r2, #12]
    return value;
 8000972:	7bfb      	ldrb	r3, [r7, #15]
}
 8000974:	4618      	mov	r0, r3
 8000976:	3710      	adds	r7, #16
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}
 800097c:	40010800 	.word	0x40010800
 8000980:	40013000 	.word	0x40013000

08000984 <send_payload>:

uint8_t send_payload(uint8_t* data, uint8_t len) {
 8000984:	b580      	push	{r7, lr}
 8000986:	b084      	sub	sp, #16
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
 800098c:	460b      	mov	r3, r1
 800098e:	70fb      	strb	r3, [r7, #3]
    // FLUSH TX
    NRF_CSN_LOW();
 8000990:	4b35      	ldr	r3, [pc, #212]	@ (8000a68 <send_payload+0xe4>)
 8000992:	68db      	ldr	r3, [r3, #12]
 8000994:	4a34      	ldr	r2, [pc, #208]	@ (8000a68 <send_payload+0xe4>)
 8000996:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800099a:	60d3      	str	r3, [r2, #12]
    spi_transfer(SPI1, 0xE1); // FLUSH_TX
 800099c:	21e1      	movs	r1, #225	@ 0xe1
 800099e:	4833      	ldr	r0, [pc, #204]	@ (8000a6c <send_payload+0xe8>)
 80009a0:	f000 f89c 	bl	8000adc <spi_transfer>
    NRF_CSN_HIGH();
 80009a4:	4b30      	ldr	r3, [pc, #192]	@ (8000a68 <send_payload+0xe4>)
 80009a6:	68db      	ldr	r3, [r3, #12]
 80009a8:	4a2f      	ldr	r2, [pc, #188]	@ (8000a68 <send_payload+0xe4>)
 80009aa:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80009ae:	60d3      	str	r3, [r2, #12]

    // Escreve payload no FIFO de TX
    NRF_CSN_LOW();
 80009b0:	4b2d      	ldr	r3, [pc, #180]	@ (8000a68 <send_payload+0xe4>)
 80009b2:	68db      	ldr	r3, [r3, #12]
 80009b4:	4a2c      	ldr	r2, [pc, #176]	@ (8000a68 <send_payload+0xe4>)
 80009b6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80009ba:	60d3      	str	r3, [r2, #12]
    spi_transfer(SPI1, 0xA0); // W_TX_PAYLOAD
 80009bc:	21a0      	movs	r1, #160	@ 0xa0
 80009be:	482b      	ldr	r0, [pc, #172]	@ (8000a6c <send_payload+0xe8>)
 80009c0:	f000 f88c 	bl	8000adc <spi_transfer>
    for (uint8_t i = 0; i < len; i++) {
 80009c4:	2300      	movs	r3, #0
 80009c6:	73fb      	strb	r3, [r7, #15]
 80009c8:	e00a      	b.n	80009e0 <send_payload+0x5c>
        spi_transfer(SPI1, data[i]);
 80009ca:	7bfb      	ldrb	r3, [r7, #15]
 80009cc:	687a      	ldr	r2, [r7, #4]
 80009ce:	4413      	add	r3, r2
 80009d0:	781b      	ldrb	r3, [r3, #0]
 80009d2:	4619      	mov	r1, r3
 80009d4:	4825      	ldr	r0, [pc, #148]	@ (8000a6c <send_payload+0xe8>)
 80009d6:	f000 f881 	bl	8000adc <spi_transfer>
    for (uint8_t i = 0; i < len; i++) {
 80009da:	7bfb      	ldrb	r3, [r7, #15]
 80009dc:	3301      	adds	r3, #1
 80009de:	73fb      	strb	r3, [r7, #15]
 80009e0:	7bfa      	ldrb	r2, [r7, #15]
 80009e2:	78fb      	ldrb	r3, [r7, #3]
 80009e4:	429a      	cmp	r2, r3
 80009e6:	d3f0      	bcc.n	80009ca <send_payload+0x46>
    }
    NRF_CSN_HIGH();
 80009e8:	4b1f      	ldr	r3, [pc, #124]	@ (8000a68 <send_payload+0xe4>)
 80009ea:	68db      	ldr	r3, [r3, #12]
 80009ec:	4a1e      	ldr	r2, [pc, #120]	@ (8000a68 <send_payload+0xe4>)
 80009ee:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80009f2:	60d3      	str	r3, [r2, #12]

    // Pulso em CE para iniciar transmissão
    NRF_CE_HIGH();
 80009f4:	4b1c      	ldr	r3, [pc, #112]	@ (8000a68 <send_payload+0xe4>)
 80009f6:	68db      	ldr	r3, [r3, #12]
 80009f8:	4a1b      	ldr	r2, [pc, #108]	@ (8000a68 <send_payload+0xe4>)
 80009fa:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80009fe:	60d3      	str	r3, [r2, #12]
    delay_us(15); // CE > 10us
 8000a00:	200f      	movs	r0, #15
 8000a02:	f000 f8dd 	bl	8000bc0 <delay_us>
    NRF_CE_LOW();
 8000a06:	4b18      	ldr	r3, [pc, #96]	@ (8000a68 <send_payload+0xe4>)
 8000a08:	68db      	ldr	r3, [r3, #12]
 8000a0a:	4a17      	ldr	r2, [pc, #92]	@ (8000a68 <send_payload+0xe4>)
 8000a0c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8000a10:	60d3      	str	r3, [r2, #12]

    // Aguarda transmissão completar
    while (!(nrf_read_register(0x07) & ((1 << 5) | (1 << 4)))) {
 8000a12:	bf00      	nop
 8000a14:	2007      	movs	r0, #7
 8000a16:	f7ff ff8d 	bl	8000934 <nrf_read_register>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d0f7      	beq.n	8000a14 <send_payload+0x90>
        // Espera até TX_DS ou MAX_RT
    }

    uint8_t status = nrf_read_register(0x07);
 8000a24:	2007      	movs	r0, #7
 8000a26:	f7ff ff85 	bl	8000934 <nrf_read_register>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	73bb      	strb	r3, [r7, #14]

    if (status & (1 << 5)) {
 8000a2e:	7bbb      	ldrb	r3, [r7, #14]
 8000a30:	f003 0320 	and.w	r3, r3, #32
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d007      	beq.n	8000a48 <send_payload+0xc4>
        // Sucesso: limpa flag TX_DS
    	teste();
 8000a38:	f7ff fe86 	bl	8000748 <teste>
        nrf_write_register(0x07, 0x0E);
 8000a3c:	210e      	movs	r1, #14
 8000a3e:	2007      	movs	r0, #7
 8000a40:	f7ff fed4 	bl	80007ec <nrf_write_register>
        return 1;
 8000a44:	2301      	movs	r3, #1
 8000a46:	e00b      	b.n	8000a60 <send_payload+0xdc>
    } else if (status & (1 << 4)) {
 8000a48:	7bbb      	ldrb	r3, [r7, #14]
 8000a4a:	f003 0310 	and.w	r3, r3, #16
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d005      	beq.n	8000a5e <send_payload+0xda>
        // Erro: MAX_RT atingido
        nrf_write_register(0x07, 0x0E); // limpa fla
 8000a52:	210e      	movs	r1, #14
 8000a54:	2007      	movs	r0, #7
 8000a56:	f7ff fec9 	bl	80007ec <nrf_write_register>
        return 0;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	e000      	b.n	8000a60 <send_payload+0xdc>
    }

    return 0;
 8000a5e:	2300      	movs	r3, #0
}
 8000a60:	4618      	mov	r0, r3
 8000a62:	3710      	adds	r7, #16
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	40010800 	.word	0x40010800
 8000a6c:	40013000 	.word	0x40013000

08000a70 <enable_spi>:
 */

#include <stdint.h>
#include "stm32f1xx.h"

void enable_spi(SPI_TypeDef *SPIx){
 8000a70:	b480      	push	{r7}
 8000a72:	b083      	sub	sp, #12
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
	SPIx->CR1 = 0; // limpa tudo
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	601a      	str	r2, [r3, #0]
	SPIx->CR1 |= (2 << 3); // Define a taxa de transmissão do SCK fsk/8
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	f043 0210 	orr.w	r2, r3, #16
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	601a      	str	r2, [r3, #0]
	SPIx->CR1 &= ~((1 << 1) | (1 << 0));
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	f023 0203 	bic.w	r2, r3, #3
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	601a      	str	r2, [r3, #0]
	SPIx->CR1 &= ~(1 << 7);
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	601a      	str	r2, [r3, #0]
	SPIx->CR1 |= (1 << 9); // Habilita NSS via software
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	601a      	str	r2, [r3, #0]
	SPIx->CR1 |= (1 << 8); // Entrada do SSM
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	601a      	str	r2, [r3, #0]
	SPIx->CR1 |= (1 << 2); // Mestre
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	f043 0204 	orr.w	r2, r3, #4
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	601a      	str	r2, [r3, #0]
	SPIx->CR1 |= (1 << 6); // Habilita SPI
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	601a      	str	r2, [r3, #0]
}
 8000ad2:	bf00      	nop
 8000ad4:	370c      	adds	r7, #12
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bc80      	pop	{r7}
 8000ada:	4770      	bx	lr

08000adc <spi_transfer>:

uint8_t spi_transfer(SPI_TypeDef *SPIx, uint8_t data) {
 8000adc:	b480      	push	{r7}
 8000ade:	b083      	sub	sp, #12
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
 8000ae4:	460b      	mov	r3, r1
 8000ae6:	70fb      	strb	r3, [r7, #3]
	while (!(SPIx->SR & SPI_SR_TXE));   // Espera buffer de transmissão vazio
 8000ae8:	bf00      	nop
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	689b      	ldr	r3, [r3, #8]
 8000aee:	f003 0302 	and.w	r3, r3, #2
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d0f9      	beq.n	8000aea <spi_transfer+0xe>
	SPIx->DR = data;                    // Envia o dado
 8000af6:	78fa      	ldrb	r2, [r7, #3]
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	60da      	str	r2, [r3, #12]
	while (!(SPIx->SR & SPI_SR_RXNE));  // Espera dado recebido
 8000afc:	bf00      	nop
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	689b      	ldr	r3, [r3, #8]
 8000b02:	f003 0301 	and.w	r3, r3, #1
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d0f9      	beq.n	8000afe <spi_transfer+0x22>
	return SPIx->DR;                    // Retorna o dado recebido
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	68db      	ldr	r3, [r3, #12]
 8000b0e:	b2db      	uxtb	r3, r3
}
 8000b10:	4618      	mov	r0, r3
 8000b12:	370c      	adds	r7, #12
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bc80      	pop	{r7}
 8000b18:	4770      	bx	lr
	...

08000b1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	b083      	sub	sp, #12
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	4603      	mov	r3, r0
 8000b24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	db0b      	blt.n	8000b46 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b2e:	79fb      	ldrb	r3, [r7, #7]
 8000b30:	f003 021f 	and.w	r2, r3, #31
 8000b34:	4906      	ldr	r1, [pc, #24]	@ (8000b50 <__NVIC_EnableIRQ+0x34>)
 8000b36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b3a:	095b      	lsrs	r3, r3, #5
 8000b3c:	2001      	movs	r0, #1
 8000b3e:	fa00 f202 	lsl.w	r2, r0, r2
 8000b42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b46:	bf00      	nop
 8000b48:	370c      	adds	r7, #12
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bc80      	pop	{r7}
 8000b4e:	4770      	bx	lr
 8000b50:	e000e100 	.word	0xe000e100

08000b54 <TIM2_IRQHandler>:
#include "stm32f1xx.h"

uint8_t delay_done1;

void TIM2_IRQHandler(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
	if(TIM2->SR & TIM_SR_UIF){
 8000b58:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000b5c:	691b      	ldr	r3, [r3, #16]
 8000b5e:	f003 0301 	and.w	r3, r3, #1
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d012      	beq.n	8000b8c <TIM2_IRQHandler+0x38>
		delay_done1 = 1;
 8000b66:	4b0b      	ldr	r3, [pc, #44]	@ (8000b94 <TIM2_IRQHandler+0x40>)
 8000b68:	2201      	movs	r2, #1
 8000b6a:	701a      	strb	r2, [r3, #0]
		TIM2->SR &=~TIM_SR_UIF;
 8000b6c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000b70:	691b      	ldr	r3, [r3, #16]
 8000b72:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000b76:	f023 0301 	bic.w	r3, r3, #1
 8000b7a:	6113      	str	r3, [r2, #16]
		TIM2->CR1 &= ~TIM_CR1_CEN;
 8000b7c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000b86:	f023 0301 	bic.w	r3, r3, #1
 8000b8a:	6013      	str	r3, [r2, #0]
	}
}
 8000b8c:	bf00      	nop
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bc80      	pop	{r7}
 8000b92:	4770      	bx	lr
 8000b94:	20000088 	.word	0x20000088

08000b98 <enable_timer>:

void enable_timer(){
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	af00      	add	r7, sp, #0
	TIM2->PSC = 8000-1; 	//8000000/8000 =1000 i.e. 1ms
 8000b9c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000ba0:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8000ba4:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM2->DIER |= TIM_DIER_UIE;
 8000ba6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000baa:	68db      	ldr	r3, [r3, #12]
 8000bac:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000bb0:	f043 0301 	orr.w	r3, r3, #1
 8000bb4:	60d3      	str	r3, [r2, #12]
	NVIC_EnableIRQ(TIM2_IRQn);
 8000bb6:	201c      	movs	r0, #28
 8000bb8:	f7ff ffb0 	bl	8000b1c <__NVIC_EnableIRQ>

}
 8000bbc:	bf00      	nop
 8000bbe:	bd80      	pop	{r7, pc}

08000bc0 <delay_us>:

void delay_us(uint32_t millisec){
 8000bc0:	b480      	push	{r7}
 8000bc2:	b083      	sub	sp, #12
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
	delay_done1 = 0;
 8000bc8:	4b10      	ldr	r3, [pc, #64]	@ (8000c0c <delay_us+0x4c>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	701a      	strb	r2, [r3, #0]
	TIM2->ARR = millisec - 1;
 8000bce:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	3b01      	subs	r3, #1
 8000bd6:	62d3      	str	r3, [r2, #44]	@ 0x2c
	TIM2->CNT = 0;
 8000bd8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000bdc:	2200      	movs	r2, #0
 8000bde:	625a      	str	r2, [r3, #36]	@ 0x24
	TIM2->CR1 |= TIM_CR1_CEN;
 8000be0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000bea:	f043 0301 	orr.w	r3, r3, #1
 8000bee:	6013      	str	r3, [r2, #0]
	while(!delay_done1);
 8000bf0:	bf00      	nop
 8000bf2:	4b06      	ldr	r3, [pc, #24]	@ (8000c0c <delay_us+0x4c>)
 8000bf4:	781b      	ldrb	r3, [r3, #0]
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d0fb      	beq.n	8000bf2 <delay_us+0x32>
	TIM2->PSC = 8-1;
 8000bfa:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000bfe:	2207      	movs	r2, #7
 8000c00:	629a      	str	r2, [r3, #40]	@ 0x28

}
 8000c02:	bf00      	nop
 8000c04:	370c      	adds	r7, #12
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bc80      	pop	{r7}
 8000c0a:	4770      	bx	lr
 8000c0c:	20000088 	.word	0x20000088

08000c10 <enable_usart>:

#include "stm32f1xx.h"
#include <stdint.h>
#include <stdio.h>

void enable_usart(){
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
	// Baud Rate: 9600 com HSI (8MHz) → USARTDIV ≈ 52.08 → 52.1 → 0x0201
	USART1->BRR = (52 << 4) | 1;
 8000c14:	4b10      	ldr	r3, [pc, #64]	@ (8000c58 <enable_usart+0x48>)
 8000c16:	f240 3241 	movw	r2, #833	@ 0x341
 8000c1a:	609a      	str	r2, [r3, #8]
	USART1->CR1 = 0;
 8000c1c:	4b0e      	ldr	r3, [pc, #56]	@ (8000c58 <enable_usart+0x48>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	60da      	str	r2, [r3, #12]
	USART1->CR1 |= (0 << 12);    // M = 0 (8 bits)
 8000c22:	4b0d      	ldr	r3, [pc, #52]	@ (8000c58 <enable_usart+0x48>)
 8000c24:	4a0c      	ldr	r2, [pc, #48]	@ (8000c58 <enable_usart+0x48>)
 8000c26:	68db      	ldr	r3, [r3, #12]
 8000c28:	60d3      	str	r3, [r2, #12]
	USART1->CR2 &= ~(3 << 12);   // STOP = 00 (1 stop bit)
 8000c2a:	4b0b      	ldr	r3, [pc, #44]	@ (8000c58 <enable_usart+0x48>)
 8000c2c:	691b      	ldr	r3, [r3, #16]
 8000c2e:	4a0a      	ldr	r2, [pc, #40]	@ (8000c58 <enable_usart+0x48>)
 8000c30:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000c34:	6113      	str	r3, [r2, #16]
	USART1->CR1 |= (1 << 3);     // TE = 1 (habilita transmissor)
 8000c36:	4b08      	ldr	r3, [pc, #32]	@ (8000c58 <enable_usart+0x48>)
 8000c38:	68db      	ldr	r3, [r3, #12]
 8000c3a:	4a07      	ldr	r2, [pc, #28]	@ (8000c58 <enable_usart+0x48>)
 8000c3c:	f043 0308 	orr.w	r3, r3, #8
 8000c40:	60d3      	str	r3, [r2, #12]
	USART1->CR1 |= (1 << 13);    // UE = 1 (USART enable)
 8000c42:	4b05      	ldr	r3, [pc, #20]	@ (8000c58 <enable_usart+0x48>)
 8000c44:	68db      	ldr	r3, [r3, #12]
 8000c46:	4a04      	ldr	r2, [pc, #16]	@ (8000c58 <enable_usart+0x48>)
 8000c48:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000c4c:	60d3      	str	r3, [r2, #12]
}
 8000c4e:	bf00      	nop
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bc80      	pop	{r7}
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop
 8000c58:	40013800 	.word	0x40013800

08000c5c <uart1_write_char>:

void uart1_write_char(char c) {
 8000c5c:	b480      	push	{r7}
 8000c5e:	b083      	sub	sp, #12
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	4603      	mov	r3, r0
 8000c64:	71fb      	strb	r3, [r7, #7]
    while (!(USART1->SR & (1 << 7))); // Espera TXE (transmit buffer empty)
 8000c66:	bf00      	nop
 8000c68:	4b0a      	ldr	r3, [pc, #40]	@ (8000c94 <uart1_write_char+0x38>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d0f9      	beq.n	8000c68 <uart1_write_char+0xc>
    USART1->DR = c;
 8000c74:	4a07      	ldr	r2, [pc, #28]	@ (8000c94 <uart1_write_char+0x38>)
 8000c76:	79fb      	ldrb	r3, [r7, #7]
 8000c78:	6053      	str	r3, [r2, #4]
    while (!(USART1->SR & (1 << 6))); // Espera TC (transmission complete)
 8000c7a:	bf00      	nop
 8000c7c:	4b05      	ldr	r3, [pc, #20]	@ (8000c94 <uart1_write_char+0x38>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d0f9      	beq.n	8000c7c <uart1_write_char+0x20>
}
 8000c88:	bf00      	nop
 8000c8a:	bf00      	nop
 8000c8c:	370c      	adds	r7, #12
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bc80      	pop	{r7}
 8000c92:	4770      	bx	lr
 8000c94:	40013800 	.word	0x40013800

08000c98 <uart1_write_string>:

void uart1_write_string(const char *s) {
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b082      	sub	sp, #8
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
    while (*s) {
 8000ca0:	e006      	b.n	8000cb0 <uart1_write_string+0x18>
        uart1_write_char(*s++);
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	1c5a      	adds	r2, r3, #1
 8000ca6:	607a      	str	r2, [r7, #4]
 8000ca8:	781b      	ldrb	r3, [r3, #0]
 8000caa:	4618      	mov	r0, r3
 8000cac:	f7ff ffd6 	bl	8000c5c <uart1_write_char>
    while (*s) {
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	781b      	ldrb	r3, [r3, #0]
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d1f4      	bne.n	8000ca2 <uart1_write_string+0xa>
    }
}
 8000cb8:	bf00      	nop
 8000cba:	bf00      	nop
 8000cbc:	3708      	adds	r7, #8
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}
	...

08000cc4 <main>:
#include "LDR.h"
#include "TIMER.h"
#include "USART.h"


int main(void) {
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b090      	sub	sp, #64	@ 0x40
 8000cc8:	af00      	add	r7, sp, #0
	enable_clock();
 8000cca:	f7ff fced 	bl	80006a8 <enable_clock>
	enable_timer();
 8000cce:	f7ff ff63 	bl	8000b98 <enable_timer>
	enable_gpio();
 8000cd2:	f7ff fc5b 	bl	800058c <enable_gpio>
	enable_spi(SPI1);
 8000cd6:	482d      	ldr	r0, [pc, #180]	@ (8000d8c <main+0xc8>)
 8000cd8:	f7ff feca 	bl	8000a70 <enable_spi>
	I2C1_Init();
 8000cdc:	f7ff fb9c 	bl	8000418 <I2C1_Init>
	enable_LDR();
 8000ce0:	f7ff fd4e 	bl	8000780 <enable_LDR>
	enable_usart();
 8000ce4:	f7ff ff94 	bl	8000c10 <enable_usart>
	nrf_config();  // configuração básica
 8000ce8:	f7ff fdae 	bl	8000848 <nrf_config>
	BMP280_Init();
 8000cec:	f7ff fb32 	bl	8000354 <BMP280_Init>
	uint32_t temperatura;
	char buffer1[20];
	char buffer2[20];
//
	while(1){
		delay_us(5000); // 1 segundo
 8000cf0:	f241 3088 	movw	r0, #5000	@ 0x1388
 8000cf4:	f7ff ff64 	bl	8000bc0 <delay_us>
		temperatura = BMP280_ReadTemperature(temp);
 8000cf8:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	f7ff fb37 	bl	8000370 <BMP280_ReadTemperature>
 8000d02:	4603      	mov	r3, r0
 8000d04:	63fb      	str	r3, [r7, #60]	@ 0x3c
		LDR_read(&photo);
 8000d06:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f7ff fd4c 	bl	80007a8 <LDR_read>
		sprintf(buffer1, "%lu\r\n", photo); // converte uint32_t para string com quebra de linha
 8000d10:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8000d12:	f107 0318 	add.w	r3, r7, #24
 8000d16:	491e      	ldr	r1, [pc, #120]	@ (8000d90 <main+0xcc>)
 8000d18:	4618      	mov	r0, r3
 8000d1a:	f000 f89f 	bl	8000e5c <siprintf>
		sprintf(buffer2, "%lu\r\n", temperatura);
 8000d1e:	1d3b      	adds	r3, r7, #4
 8000d20:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000d22:	491b      	ldr	r1, [pc, #108]	@ (8000d90 <main+0xcc>)
 8000d24:	4618      	mov	r0, r3
 8000d26:	f000 f899 	bl	8000e5c <siprintf>
		uart1_write_string("photo Sensor \r\n");
 8000d2a:	481a      	ldr	r0, [pc, #104]	@ (8000d94 <main+0xd0>)
 8000d2c:	f7ff ffb4 	bl	8000c98 <uart1_write_string>
		uart1_write_string(buffer1);
 8000d30:	f107 0318 	add.w	r3, r7, #24
 8000d34:	4618      	mov	r0, r3
 8000d36:	f7ff ffaf 	bl	8000c98 <uart1_write_string>
		uart1_write_string("Temperatura \r\n");
 8000d3a:	4817      	ldr	r0, [pc, #92]	@ (8000d98 <main+0xd4>)
 8000d3c:	f7ff ffac 	bl	8000c98 <uart1_write_string>
		uart1_write_string(buffer2);
 8000d40:	1d3b      	adds	r3, r7, #4
 8000d42:	4618      	mov	r0, r3
 8000d44:	f7ff ffa8 	bl	8000c98 <uart1_write_string>
		payload[0] = temp[0];
 8000d48:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8000d4c:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
		payload[1] = temp[1];
 8000d50:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8000d54:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
		payload[2] = temp[2];
 8000d58:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8000d5c:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
		payload[3] = (uint8_t)(photo & 0xFF);
 8000d60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000d62:	b2db      	uxtb	r3, r3
 8000d64:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		payload[4] = (uint8_t)((photo >> 8) & 0xFF);
 8000d68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000d6a:	0a1b      	lsrs	r3, r3, #8
 8000d6c:	b2db      	uxtb	r3, r3
 8000d6e:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
		payload[5] = (uint8_t)((photo >> 16) & 0xFF);
 8000d72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000d74:	0c1b      	lsrs	r3, r3, #16
 8000d76:	b2db      	uxtb	r3, r3
 8000d78:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
		send_payload(payload, 6); // envia 2 bytes
 8000d7c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d80:	2106      	movs	r1, #6
 8000d82:	4618      	mov	r0, r3
 8000d84:	f7ff fdfe 	bl	8000984 <send_payload>
		delay_us(5000); // 1 segundo
 8000d88:	bf00      	nop
 8000d8a:	e7b1      	b.n	8000cf0 <main+0x2c>
 8000d8c:	40013000 	.word	0x40013000
 8000d90:	080017cc 	.word	0x080017cc
 8000d94:	080017d4 	.word	0x080017d4
 8000d98:	080017e4 	.word	0x080017e4

08000d9c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b086      	sub	sp, #24
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000da4:	4a14      	ldr	r2, [pc, #80]	@ (8000df8 <_sbrk+0x5c>)
 8000da6:	4b15      	ldr	r3, [pc, #84]	@ (8000dfc <_sbrk+0x60>)
 8000da8:	1ad3      	subs	r3, r2, r3
 8000daa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000dac:	697b      	ldr	r3, [r7, #20]
 8000dae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000db0:	4b13      	ldr	r3, [pc, #76]	@ (8000e00 <_sbrk+0x64>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d102      	bne.n	8000dbe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000db8:	4b11      	ldr	r3, [pc, #68]	@ (8000e00 <_sbrk+0x64>)
 8000dba:	4a12      	ldr	r2, [pc, #72]	@ (8000e04 <_sbrk+0x68>)
 8000dbc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dbe:	4b10      	ldr	r3, [pc, #64]	@ (8000e00 <_sbrk+0x64>)
 8000dc0:	681a      	ldr	r2, [r3, #0]
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	4413      	add	r3, r2
 8000dc6:	693a      	ldr	r2, [r7, #16]
 8000dc8:	429a      	cmp	r2, r3
 8000dca:	d207      	bcs.n	8000ddc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000dcc:	f000 f868 	bl	8000ea0 <__errno>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	220c      	movs	r2, #12
 8000dd4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dd6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000dda:	e009      	b.n	8000df0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ddc:	4b08      	ldr	r3, [pc, #32]	@ (8000e00 <_sbrk+0x64>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000de2:	4b07      	ldr	r3, [pc, #28]	@ (8000e00 <_sbrk+0x64>)
 8000de4:	681a      	ldr	r2, [r3, #0]
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	4413      	add	r3, r2
 8000dea:	4a05      	ldr	r2, [pc, #20]	@ (8000e00 <_sbrk+0x64>)
 8000dec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dee:	68fb      	ldr	r3, [r7, #12]
}
 8000df0:	4618      	mov	r0, r3
 8000df2:	3718      	adds	r7, #24
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	20005000 	.word	0x20005000
 8000dfc:	00000400 	.word	0x00000400
 8000e00:	2000008c 	.word	0x2000008c
 8000e04:	200001d8 	.word	0x200001d8

08000e08 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000e08:	480d      	ldr	r0, [pc, #52]	@ (8000e40 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000e0a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000e0c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e10:	480c      	ldr	r0, [pc, #48]	@ (8000e44 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e12:	490d      	ldr	r1, [pc, #52]	@ (8000e48 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e14:	4a0d      	ldr	r2, [pc, #52]	@ (8000e4c <LoopForever+0xe>)
  movs r3, #0
 8000e16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e18:	e002      	b.n	8000e20 <LoopCopyDataInit>

08000e1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e1e:	3304      	adds	r3, #4

08000e20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e24:	d3f9      	bcc.n	8000e1a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e26:	4a0a      	ldr	r2, [pc, #40]	@ (8000e50 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e28:	4c0a      	ldr	r4, [pc, #40]	@ (8000e54 <LoopForever+0x16>)
  movs r3, #0
 8000e2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e2c:	e001      	b.n	8000e32 <LoopFillZerobss>

08000e2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e30:	3204      	adds	r2, #4

08000e32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e34:	d3fb      	bcc.n	8000e2e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000e36:	f000 f839 	bl	8000eac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e3a:	f7ff ff43 	bl	8000cc4 <main>

08000e3e <LoopForever>:

LoopForever:
  b LoopForever
 8000e3e:	e7fe      	b.n	8000e3e <LoopForever>
  ldr   r0, =_estack
 8000e40:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000e44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e48:	20000050 	.word	0x20000050
  ldr r2, =_sidata
 8000e4c:	08001830 	.word	0x08001830
  ldr r2, =_sbss
 8000e50:	20000050 	.word	0x20000050
  ldr r4, =_ebss
 8000e54:	200001d8 	.word	0x200001d8

08000e58 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e58:	e7fe      	b.n	8000e58 <ADC1_2_IRQHandler>
	...

08000e5c <siprintf>:
 8000e5c:	b40e      	push	{r1, r2, r3}
 8000e5e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8000e62:	b510      	push	{r4, lr}
 8000e64:	2400      	movs	r4, #0
 8000e66:	b09d      	sub	sp, #116	@ 0x74
 8000e68:	ab1f      	add	r3, sp, #124	@ 0x7c
 8000e6a:	9002      	str	r0, [sp, #8]
 8000e6c:	9006      	str	r0, [sp, #24]
 8000e6e:	9107      	str	r1, [sp, #28]
 8000e70:	9104      	str	r1, [sp, #16]
 8000e72:	4809      	ldr	r0, [pc, #36]	@ (8000e98 <siprintf+0x3c>)
 8000e74:	4909      	ldr	r1, [pc, #36]	@ (8000e9c <siprintf+0x40>)
 8000e76:	f853 2b04 	ldr.w	r2, [r3], #4
 8000e7a:	9105      	str	r1, [sp, #20]
 8000e7c:	6800      	ldr	r0, [r0, #0]
 8000e7e:	a902      	add	r1, sp, #8
 8000e80:	9301      	str	r3, [sp, #4]
 8000e82:	941b      	str	r4, [sp, #108]	@ 0x6c
 8000e84:	f000 f98a 	bl	800119c <_svfiprintf_r>
 8000e88:	9b02      	ldr	r3, [sp, #8]
 8000e8a:	701c      	strb	r4, [r3, #0]
 8000e8c:	b01d      	add	sp, #116	@ 0x74
 8000e8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000e92:	b003      	add	sp, #12
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop
 8000e98:	20000000 	.word	0x20000000
 8000e9c:	ffff0208 	.word	0xffff0208

08000ea0 <__errno>:
 8000ea0:	4b01      	ldr	r3, [pc, #4]	@ (8000ea8 <__errno+0x8>)
 8000ea2:	6818      	ldr	r0, [r3, #0]
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop
 8000ea8:	20000000 	.word	0x20000000

08000eac <__libc_init_array>:
 8000eac:	b570      	push	{r4, r5, r6, lr}
 8000eae:	2600      	movs	r6, #0
 8000eb0:	4d0c      	ldr	r5, [pc, #48]	@ (8000ee4 <__libc_init_array+0x38>)
 8000eb2:	4c0d      	ldr	r4, [pc, #52]	@ (8000ee8 <__libc_init_array+0x3c>)
 8000eb4:	1b64      	subs	r4, r4, r5
 8000eb6:	10a4      	asrs	r4, r4, #2
 8000eb8:	42a6      	cmp	r6, r4
 8000eba:	d109      	bne.n	8000ed0 <__libc_init_array+0x24>
 8000ebc:	f000 fc76 	bl	80017ac <_init>
 8000ec0:	2600      	movs	r6, #0
 8000ec2:	4d0a      	ldr	r5, [pc, #40]	@ (8000eec <__libc_init_array+0x40>)
 8000ec4:	4c0a      	ldr	r4, [pc, #40]	@ (8000ef0 <__libc_init_array+0x44>)
 8000ec6:	1b64      	subs	r4, r4, r5
 8000ec8:	10a4      	asrs	r4, r4, #2
 8000eca:	42a6      	cmp	r6, r4
 8000ecc:	d105      	bne.n	8000eda <__libc_init_array+0x2e>
 8000ece:	bd70      	pop	{r4, r5, r6, pc}
 8000ed0:	f855 3b04 	ldr.w	r3, [r5], #4
 8000ed4:	4798      	blx	r3
 8000ed6:	3601      	adds	r6, #1
 8000ed8:	e7ee      	b.n	8000eb8 <__libc_init_array+0xc>
 8000eda:	f855 3b04 	ldr.w	r3, [r5], #4
 8000ede:	4798      	blx	r3
 8000ee0:	3601      	adds	r6, #1
 8000ee2:	e7f2      	b.n	8000eca <__libc_init_array+0x1e>
 8000ee4:	08001828 	.word	0x08001828
 8000ee8:	08001828 	.word	0x08001828
 8000eec:	08001828 	.word	0x08001828
 8000ef0:	0800182c 	.word	0x0800182c

08000ef4 <__retarget_lock_acquire_recursive>:
 8000ef4:	4770      	bx	lr

08000ef6 <__retarget_lock_release_recursive>:
 8000ef6:	4770      	bx	lr

08000ef8 <_free_r>:
 8000ef8:	b538      	push	{r3, r4, r5, lr}
 8000efa:	4605      	mov	r5, r0
 8000efc:	2900      	cmp	r1, #0
 8000efe:	d040      	beq.n	8000f82 <_free_r+0x8a>
 8000f00:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000f04:	1f0c      	subs	r4, r1, #4
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	bfb8      	it	lt
 8000f0a:	18e4      	addlt	r4, r4, r3
 8000f0c:	f000 f8de 	bl	80010cc <__malloc_lock>
 8000f10:	4a1c      	ldr	r2, [pc, #112]	@ (8000f84 <_free_r+0x8c>)
 8000f12:	6813      	ldr	r3, [r2, #0]
 8000f14:	b933      	cbnz	r3, 8000f24 <_free_r+0x2c>
 8000f16:	6063      	str	r3, [r4, #4]
 8000f18:	6014      	str	r4, [r2, #0]
 8000f1a:	4628      	mov	r0, r5
 8000f1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000f20:	f000 b8da 	b.w	80010d8 <__malloc_unlock>
 8000f24:	42a3      	cmp	r3, r4
 8000f26:	d908      	bls.n	8000f3a <_free_r+0x42>
 8000f28:	6820      	ldr	r0, [r4, #0]
 8000f2a:	1821      	adds	r1, r4, r0
 8000f2c:	428b      	cmp	r3, r1
 8000f2e:	bf01      	itttt	eq
 8000f30:	6819      	ldreq	r1, [r3, #0]
 8000f32:	685b      	ldreq	r3, [r3, #4]
 8000f34:	1809      	addeq	r1, r1, r0
 8000f36:	6021      	streq	r1, [r4, #0]
 8000f38:	e7ed      	b.n	8000f16 <_free_r+0x1e>
 8000f3a:	461a      	mov	r2, r3
 8000f3c:	685b      	ldr	r3, [r3, #4]
 8000f3e:	b10b      	cbz	r3, 8000f44 <_free_r+0x4c>
 8000f40:	42a3      	cmp	r3, r4
 8000f42:	d9fa      	bls.n	8000f3a <_free_r+0x42>
 8000f44:	6811      	ldr	r1, [r2, #0]
 8000f46:	1850      	adds	r0, r2, r1
 8000f48:	42a0      	cmp	r0, r4
 8000f4a:	d10b      	bne.n	8000f64 <_free_r+0x6c>
 8000f4c:	6820      	ldr	r0, [r4, #0]
 8000f4e:	4401      	add	r1, r0
 8000f50:	1850      	adds	r0, r2, r1
 8000f52:	4283      	cmp	r3, r0
 8000f54:	6011      	str	r1, [r2, #0]
 8000f56:	d1e0      	bne.n	8000f1a <_free_r+0x22>
 8000f58:	6818      	ldr	r0, [r3, #0]
 8000f5a:	685b      	ldr	r3, [r3, #4]
 8000f5c:	4408      	add	r0, r1
 8000f5e:	6010      	str	r0, [r2, #0]
 8000f60:	6053      	str	r3, [r2, #4]
 8000f62:	e7da      	b.n	8000f1a <_free_r+0x22>
 8000f64:	d902      	bls.n	8000f6c <_free_r+0x74>
 8000f66:	230c      	movs	r3, #12
 8000f68:	602b      	str	r3, [r5, #0]
 8000f6a:	e7d6      	b.n	8000f1a <_free_r+0x22>
 8000f6c:	6820      	ldr	r0, [r4, #0]
 8000f6e:	1821      	adds	r1, r4, r0
 8000f70:	428b      	cmp	r3, r1
 8000f72:	bf01      	itttt	eq
 8000f74:	6819      	ldreq	r1, [r3, #0]
 8000f76:	685b      	ldreq	r3, [r3, #4]
 8000f78:	1809      	addeq	r1, r1, r0
 8000f7a:	6021      	streq	r1, [r4, #0]
 8000f7c:	6063      	str	r3, [r4, #4]
 8000f7e:	6054      	str	r4, [r2, #4]
 8000f80:	e7cb      	b.n	8000f1a <_free_r+0x22>
 8000f82:	bd38      	pop	{r3, r4, r5, pc}
 8000f84:	200001d4 	.word	0x200001d4

08000f88 <sbrk_aligned>:
 8000f88:	b570      	push	{r4, r5, r6, lr}
 8000f8a:	4e0f      	ldr	r6, [pc, #60]	@ (8000fc8 <sbrk_aligned+0x40>)
 8000f8c:	460c      	mov	r4, r1
 8000f8e:	6831      	ldr	r1, [r6, #0]
 8000f90:	4605      	mov	r5, r0
 8000f92:	b911      	cbnz	r1, 8000f9a <sbrk_aligned+0x12>
 8000f94:	f000 fba8 	bl	80016e8 <_sbrk_r>
 8000f98:	6030      	str	r0, [r6, #0]
 8000f9a:	4621      	mov	r1, r4
 8000f9c:	4628      	mov	r0, r5
 8000f9e:	f000 fba3 	bl	80016e8 <_sbrk_r>
 8000fa2:	1c43      	adds	r3, r0, #1
 8000fa4:	d103      	bne.n	8000fae <sbrk_aligned+0x26>
 8000fa6:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8000faa:	4620      	mov	r0, r4
 8000fac:	bd70      	pop	{r4, r5, r6, pc}
 8000fae:	1cc4      	adds	r4, r0, #3
 8000fb0:	f024 0403 	bic.w	r4, r4, #3
 8000fb4:	42a0      	cmp	r0, r4
 8000fb6:	d0f8      	beq.n	8000faa <sbrk_aligned+0x22>
 8000fb8:	1a21      	subs	r1, r4, r0
 8000fba:	4628      	mov	r0, r5
 8000fbc:	f000 fb94 	bl	80016e8 <_sbrk_r>
 8000fc0:	3001      	adds	r0, #1
 8000fc2:	d1f2      	bne.n	8000faa <sbrk_aligned+0x22>
 8000fc4:	e7ef      	b.n	8000fa6 <sbrk_aligned+0x1e>
 8000fc6:	bf00      	nop
 8000fc8:	200001d0 	.word	0x200001d0

08000fcc <_malloc_r>:
 8000fcc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000fd0:	1ccd      	adds	r5, r1, #3
 8000fd2:	f025 0503 	bic.w	r5, r5, #3
 8000fd6:	3508      	adds	r5, #8
 8000fd8:	2d0c      	cmp	r5, #12
 8000fda:	bf38      	it	cc
 8000fdc:	250c      	movcc	r5, #12
 8000fde:	2d00      	cmp	r5, #0
 8000fe0:	4606      	mov	r6, r0
 8000fe2:	db01      	blt.n	8000fe8 <_malloc_r+0x1c>
 8000fe4:	42a9      	cmp	r1, r5
 8000fe6:	d904      	bls.n	8000ff2 <_malloc_r+0x26>
 8000fe8:	230c      	movs	r3, #12
 8000fea:	6033      	str	r3, [r6, #0]
 8000fec:	2000      	movs	r0, #0
 8000fee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000ff2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80010c8 <_malloc_r+0xfc>
 8000ff6:	f000 f869 	bl	80010cc <__malloc_lock>
 8000ffa:	f8d8 3000 	ldr.w	r3, [r8]
 8000ffe:	461c      	mov	r4, r3
 8001000:	bb44      	cbnz	r4, 8001054 <_malloc_r+0x88>
 8001002:	4629      	mov	r1, r5
 8001004:	4630      	mov	r0, r6
 8001006:	f7ff ffbf 	bl	8000f88 <sbrk_aligned>
 800100a:	1c43      	adds	r3, r0, #1
 800100c:	4604      	mov	r4, r0
 800100e:	d158      	bne.n	80010c2 <_malloc_r+0xf6>
 8001010:	f8d8 4000 	ldr.w	r4, [r8]
 8001014:	4627      	mov	r7, r4
 8001016:	2f00      	cmp	r7, #0
 8001018:	d143      	bne.n	80010a2 <_malloc_r+0xd6>
 800101a:	2c00      	cmp	r4, #0
 800101c:	d04b      	beq.n	80010b6 <_malloc_r+0xea>
 800101e:	6823      	ldr	r3, [r4, #0]
 8001020:	4639      	mov	r1, r7
 8001022:	4630      	mov	r0, r6
 8001024:	eb04 0903 	add.w	r9, r4, r3
 8001028:	f000 fb5e 	bl	80016e8 <_sbrk_r>
 800102c:	4581      	cmp	r9, r0
 800102e:	d142      	bne.n	80010b6 <_malloc_r+0xea>
 8001030:	6821      	ldr	r1, [r4, #0]
 8001032:	4630      	mov	r0, r6
 8001034:	1a6d      	subs	r5, r5, r1
 8001036:	4629      	mov	r1, r5
 8001038:	f7ff ffa6 	bl	8000f88 <sbrk_aligned>
 800103c:	3001      	adds	r0, #1
 800103e:	d03a      	beq.n	80010b6 <_malloc_r+0xea>
 8001040:	6823      	ldr	r3, [r4, #0]
 8001042:	442b      	add	r3, r5
 8001044:	6023      	str	r3, [r4, #0]
 8001046:	f8d8 3000 	ldr.w	r3, [r8]
 800104a:	685a      	ldr	r2, [r3, #4]
 800104c:	bb62      	cbnz	r2, 80010a8 <_malloc_r+0xdc>
 800104e:	f8c8 7000 	str.w	r7, [r8]
 8001052:	e00f      	b.n	8001074 <_malloc_r+0xa8>
 8001054:	6822      	ldr	r2, [r4, #0]
 8001056:	1b52      	subs	r2, r2, r5
 8001058:	d420      	bmi.n	800109c <_malloc_r+0xd0>
 800105a:	2a0b      	cmp	r2, #11
 800105c:	d917      	bls.n	800108e <_malloc_r+0xc2>
 800105e:	1961      	adds	r1, r4, r5
 8001060:	42a3      	cmp	r3, r4
 8001062:	6025      	str	r5, [r4, #0]
 8001064:	bf18      	it	ne
 8001066:	6059      	strne	r1, [r3, #4]
 8001068:	6863      	ldr	r3, [r4, #4]
 800106a:	bf08      	it	eq
 800106c:	f8c8 1000 	streq.w	r1, [r8]
 8001070:	5162      	str	r2, [r4, r5]
 8001072:	604b      	str	r3, [r1, #4]
 8001074:	4630      	mov	r0, r6
 8001076:	f000 f82f 	bl	80010d8 <__malloc_unlock>
 800107a:	f104 000b 	add.w	r0, r4, #11
 800107e:	1d23      	adds	r3, r4, #4
 8001080:	f020 0007 	bic.w	r0, r0, #7
 8001084:	1ac2      	subs	r2, r0, r3
 8001086:	bf1c      	itt	ne
 8001088:	1a1b      	subne	r3, r3, r0
 800108a:	50a3      	strne	r3, [r4, r2]
 800108c:	e7af      	b.n	8000fee <_malloc_r+0x22>
 800108e:	6862      	ldr	r2, [r4, #4]
 8001090:	42a3      	cmp	r3, r4
 8001092:	bf0c      	ite	eq
 8001094:	f8c8 2000 	streq.w	r2, [r8]
 8001098:	605a      	strne	r2, [r3, #4]
 800109a:	e7eb      	b.n	8001074 <_malloc_r+0xa8>
 800109c:	4623      	mov	r3, r4
 800109e:	6864      	ldr	r4, [r4, #4]
 80010a0:	e7ae      	b.n	8001000 <_malloc_r+0x34>
 80010a2:	463c      	mov	r4, r7
 80010a4:	687f      	ldr	r7, [r7, #4]
 80010a6:	e7b6      	b.n	8001016 <_malloc_r+0x4a>
 80010a8:	461a      	mov	r2, r3
 80010aa:	685b      	ldr	r3, [r3, #4]
 80010ac:	42a3      	cmp	r3, r4
 80010ae:	d1fb      	bne.n	80010a8 <_malloc_r+0xdc>
 80010b0:	2300      	movs	r3, #0
 80010b2:	6053      	str	r3, [r2, #4]
 80010b4:	e7de      	b.n	8001074 <_malloc_r+0xa8>
 80010b6:	230c      	movs	r3, #12
 80010b8:	4630      	mov	r0, r6
 80010ba:	6033      	str	r3, [r6, #0]
 80010bc:	f000 f80c 	bl	80010d8 <__malloc_unlock>
 80010c0:	e794      	b.n	8000fec <_malloc_r+0x20>
 80010c2:	6005      	str	r5, [r0, #0]
 80010c4:	e7d6      	b.n	8001074 <_malloc_r+0xa8>
 80010c6:	bf00      	nop
 80010c8:	200001d4 	.word	0x200001d4

080010cc <__malloc_lock>:
 80010cc:	4801      	ldr	r0, [pc, #4]	@ (80010d4 <__malloc_lock+0x8>)
 80010ce:	f7ff bf11 	b.w	8000ef4 <__retarget_lock_acquire_recursive>
 80010d2:	bf00      	nop
 80010d4:	200001cc 	.word	0x200001cc

080010d8 <__malloc_unlock>:
 80010d8:	4801      	ldr	r0, [pc, #4]	@ (80010e0 <__malloc_unlock+0x8>)
 80010da:	f7ff bf0c 	b.w	8000ef6 <__retarget_lock_release_recursive>
 80010de:	bf00      	nop
 80010e0:	200001cc 	.word	0x200001cc

080010e4 <__ssputs_r>:
 80010e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80010e8:	461f      	mov	r7, r3
 80010ea:	688e      	ldr	r6, [r1, #8]
 80010ec:	4682      	mov	sl, r0
 80010ee:	42be      	cmp	r6, r7
 80010f0:	460c      	mov	r4, r1
 80010f2:	4690      	mov	r8, r2
 80010f4:	680b      	ldr	r3, [r1, #0]
 80010f6:	d82d      	bhi.n	8001154 <__ssputs_r+0x70>
 80010f8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80010fc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8001100:	d026      	beq.n	8001150 <__ssputs_r+0x6c>
 8001102:	6965      	ldr	r5, [r4, #20]
 8001104:	6909      	ldr	r1, [r1, #16]
 8001106:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800110a:	eba3 0901 	sub.w	r9, r3, r1
 800110e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8001112:	1c7b      	adds	r3, r7, #1
 8001114:	444b      	add	r3, r9
 8001116:	106d      	asrs	r5, r5, #1
 8001118:	429d      	cmp	r5, r3
 800111a:	bf38      	it	cc
 800111c:	461d      	movcc	r5, r3
 800111e:	0553      	lsls	r3, r2, #21
 8001120:	d527      	bpl.n	8001172 <__ssputs_r+0x8e>
 8001122:	4629      	mov	r1, r5
 8001124:	f7ff ff52 	bl	8000fcc <_malloc_r>
 8001128:	4606      	mov	r6, r0
 800112a:	b360      	cbz	r0, 8001186 <__ssputs_r+0xa2>
 800112c:	464a      	mov	r2, r9
 800112e:	6921      	ldr	r1, [r4, #16]
 8001130:	f000 faf8 	bl	8001724 <memcpy>
 8001134:	89a3      	ldrh	r3, [r4, #12]
 8001136:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800113a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800113e:	81a3      	strh	r3, [r4, #12]
 8001140:	6126      	str	r6, [r4, #16]
 8001142:	444e      	add	r6, r9
 8001144:	6026      	str	r6, [r4, #0]
 8001146:	463e      	mov	r6, r7
 8001148:	6165      	str	r5, [r4, #20]
 800114a:	eba5 0509 	sub.w	r5, r5, r9
 800114e:	60a5      	str	r5, [r4, #8]
 8001150:	42be      	cmp	r6, r7
 8001152:	d900      	bls.n	8001156 <__ssputs_r+0x72>
 8001154:	463e      	mov	r6, r7
 8001156:	4632      	mov	r2, r6
 8001158:	4641      	mov	r1, r8
 800115a:	6820      	ldr	r0, [r4, #0]
 800115c:	f000 faaa 	bl	80016b4 <memmove>
 8001160:	2000      	movs	r0, #0
 8001162:	68a3      	ldr	r3, [r4, #8]
 8001164:	1b9b      	subs	r3, r3, r6
 8001166:	60a3      	str	r3, [r4, #8]
 8001168:	6823      	ldr	r3, [r4, #0]
 800116a:	4433      	add	r3, r6
 800116c:	6023      	str	r3, [r4, #0]
 800116e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001172:	462a      	mov	r2, r5
 8001174:	f000 fae4 	bl	8001740 <_realloc_r>
 8001178:	4606      	mov	r6, r0
 800117a:	2800      	cmp	r0, #0
 800117c:	d1e0      	bne.n	8001140 <__ssputs_r+0x5c>
 800117e:	4650      	mov	r0, sl
 8001180:	6921      	ldr	r1, [r4, #16]
 8001182:	f7ff feb9 	bl	8000ef8 <_free_r>
 8001186:	230c      	movs	r3, #12
 8001188:	f8ca 3000 	str.w	r3, [sl]
 800118c:	89a3      	ldrh	r3, [r4, #12]
 800118e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001192:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001196:	81a3      	strh	r3, [r4, #12]
 8001198:	e7e9      	b.n	800116e <__ssputs_r+0x8a>
	...

0800119c <_svfiprintf_r>:
 800119c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80011a0:	4698      	mov	r8, r3
 80011a2:	898b      	ldrh	r3, [r1, #12]
 80011a4:	4607      	mov	r7, r0
 80011a6:	061b      	lsls	r3, r3, #24
 80011a8:	460d      	mov	r5, r1
 80011aa:	4614      	mov	r4, r2
 80011ac:	b09d      	sub	sp, #116	@ 0x74
 80011ae:	d510      	bpl.n	80011d2 <_svfiprintf_r+0x36>
 80011b0:	690b      	ldr	r3, [r1, #16]
 80011b2:	b973      	cbnz	r3, 80011d2 <_svfiprintf_r+0x36>
 80011b4:	2140      	movs	r1, #64	@ 0x40
 80011b6:	f7ff ff09 	bl	8000fcc <_malloc_r>
 80011ba:	6028      	str	r0, [r5, #0]
 80011bc:	6128      	str	r0, [r5, #16]
 80011be:	b930      	cbnz	r0, 80011ce <_svfiprintf_r+0x32>
 80011c0:	230c      	movs	r3, #12
 80011c2:	603b      	str	r3, [r7, #0]
 80011c4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80011c8:	b01d      	add	sp, #116	@ 0x74
 80011ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80011ce:	2340      	movs	r3, #64	@ 0x40
 80011d0:	616b      	str	r3, [r5, #20]
 80011d2:	2300      	movs	r3, #0
 80011d4:	9309      	str	r3, [sp, #36]	@ 0x24
 80011d6:	2320      	movs	r3, #32
 80011d8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80011dc:	2330      	movs	r3, #48	@ 0x30
 80011de:	f04f 0901 	mov.w	r9, #1
 80011e2:	f8cd 800c 	str.w	r8, [sp, #12]
 80011e6:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8001380 <_svfiprintf_r+0x1e4>
 80011ea:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80011ee:	4623      	mov	r3, r4
 80011f0:	469a      	mov	sl, r3
 80011f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80011f6:	b10a      	cbz	r2, 80011fc <_svfiprintf_r+0x60>
 80011f8:	2a25      	cmp	r2, #37	@ 0x25
 80011fa:	d1f9      	bne.n	80011f0 <_svfiprintf_r+0x54>
 80011fc:	ebba 0b04 	subs.w	fp, sl, r4
 8001200:	d00b      	beq.n	800121a <_svfiprintf_r+0x7e>
 8001202:	465b      	mov	r3, fp
 8001204:	4622      	mov	r2, r4
 8001206:	4629      	mov	r1, r5
 8001208:	4638      	mov	r0, r7
 800120a:	f7ff ff6b 	bl	80010e4 <__ssputs_r>
 800120e:	3001      	adds	r0, #1
 8001210:	f000 80a7 	beq.w	8001362 <_svfiprintf_r+0x1c6>
 8001214:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8001216:	445a      	add	r2, fp
 8001218:	9209      	str	r2, [sp, #36]	@ 0x24
 800121a:	f89a 3000 	ldrb.w	r3, [sl]
 800121e:	2b00      	cmp	r3, #0
 8001220:	f000 809f 	beq.w	8001362 <_svfiprintf_r+0x1c6>
 8001224:	2300      	movs	r3, #0
 8001226:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800122a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800122e:	f10a 0a01 	add.w	sl, sl, #1
 8001232:	9304      	str	r3, [sp, #16]
 8001234:	9307      	str	r3, [sp, #28]
 8001236:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800123a:	931a      	str	r3, [sp, #104]	@ 0x68
 800123c:	4654      	mov	r4, sl
 800123e:	2205      	movs	r2, #5
 8001240:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001244:	484e      	ldr	r0, [pc, #312]	@ (8001380 <_svfiprintf_r+0x1e4>)
 8001246:	f000 fa5f 	bl	8001708 <memchr>
 800124a:	9a04      	ldr	r2, [sp, #16]
 800124c:	b9d8      	cbnz	r0, 8001286 <_svfiprintf_r+0xea>
 800124e:	06d0      	lsls	r0, r2, #27
 8001250:	bf44      	itt	mi
 8001252:	2320      	movmi	r3, #32
 8001254:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001258:	0711      	lsls	r1, r2, #28
 800125a:	bf44      	itt	mi
 800125c:	232b      	movmi	r3, #43	@ 0x2b
 800125e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001262:	f89a 3000 	ldrb.w	r3, [sl]
 8001266:	2b2a      	cmp	r3, #42	@ 0x2a
 8001268:	d015      	beq.n	8001296 <_svfiprintf_r+0xfa>
 800126a:	4654      	mov	r4, sl
 800126c:	2000      	movs	r0, #0
 800126e:	f04f 0c0a 	mov.w	ip, #10
 8001272:	9a07      	ldr	r2, [sp, #28]
 8001274:	4621      	mov	r1, r4
 8001276:	f811 3b01 	ldrb.w	r3, [r1], #1
 800127a:	3b30      	subs	r3, #48	@ 0x30
 800127c:	2b09      	cmp	r3, #9
 800127e:	d94b      	bls.n	8001318 <_svfiprintf_r+0x17c>
 8001280:	b1b0      	cbz	r0, 80012b0 <_svfiprintf_r+0x114>
 8001282:	9207      	str	r2, [sp, #28]
 8001284:	e014      	b.n	80012b0 <_svfiprintf_r+0x114>
 8001286:	eba0 0308 	sub.w	r3, r0, r8
 800128a:	fa09 f303 	lsl.w	r3, r9, r3
 800128e:	4313      	orrs	r3, r2
 8001290:	46a2      	mov	sl, r4
 8001292:	9304      	str	r3, [sp, #16]
 8001294:	e7d2      	b.n	800123c <_svfiprintf_r+0xa0>
 8001296:	9b03      	ldr	r3, [sp, #12]
 8001298:	1d19      	adds	r1, r3, #4
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	9103      	str	r1, [sp, #12]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	bfbb      	ittet	lt
 80012a2:	425b      	neglt	r3, r3
 80012a4:	f042 0202 	orrlt.w	r2, r2, #2
 80012a8:	9307      	strge	r3, [sp, #28]
 80012aa:	9307      	strlt	r3, [sp, #28]
 80012ac:	bfb8      	it	lt
 80012ae:	9204      	strlt	r2, [sp, #16]
 80012b0:	7823      	ldrb	r3, [r4, #0]
 80012b2:	2b2e      	cmp	r3, #46	@ 0x2e
 80012b4:	d10a      	bne.n	80012cc <_svfiprintf_r+0x130>
 80012b6:	7863      	ldrb	r3, [r4, #1]
 80012b8:	2b2a      	cmp	r3, #42	@ 0x2a
 80012ba:	d132      	bne.n	8001322 <_svfiprintf_r+0x186>
 80012bc:	9b03      	ldr	r3, [sp, #12]
 80012be:	3402      	adds	r4, #2
 80012c0:	1d1a      	adds	r2, r3, #4
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	9203      	str	r2, [sp, #12]
 80012c6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80012ca:	9305      	str	r3, [sp, #20]
 80012cc:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8001384 <_svfiprintf_r+0x1e8>
 80012d0:	2203      	movs	r2, #3
 80012d2:	4650      	mov	r0, sl
 80012d4:	7821      	ldrb	r1, [r4, #0]
 80012d6:	f000 fa17 	bl	8001708 <memchr>
 80012da:	b138      	cbz	r0, 80012ec <_svfiprintf_r+0x150>
 80012dc:	2240      	movs	r2, #64	@ 0x40
 80012de:	9b04      	ldr	r3, [sp, #16]
 80012e0:	eba0 000a 	sub.w	r0, r0, sl
 80012e4:	4082      	lsls	r2, r0
 80012e6:	4313      	orrs	r3, r2
 80012e8:	3401      	adds	r4, #1
 80012ea:	9304      	str	r3, [sp, #16]
 80012ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80012f0:	2206      	movs	r2, #6
 80012f2:	4825      	ldr	r0, [pc, #148]	@ (8001388 <_svfiprintf_r+0x1ec>)
 80012f4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80012f8:	f000 fa06 	bl	8001708 <memchr>
 80012fc:	2800      	cmp	r0, #0
 80012fe:	d036      	beq.n	800136e <_svfiprintf_r+0x1d2>
 8001300:	4b22      	ldr	r3, [pc, #136]	@ (800138c <_svfiprintf_r+0x1f0>)
 8001302:	bb1b      	cbnz	r3, 800134c <_svfiprintf_r+0x1b0>
 8001304:	9b03      	ldr	r3, [sp, #12]
 8001306:	3307      	adds	r3, #7
 8001308:	f023 0307 	bic.w	r3, r3, #7
 800130c:	3308      	adds	r3, #8
 800130e:	9303      	str	r3, [sp, #12]
 8001310:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8001312:	4433      	add	r3, r6
 8001314:	9309      	str	r3, [sp, #36]	@ 0x24
 8001316:	e76a      	b.n	80011ee <_svfiprintf_r+0x52>
 8001318:	460c      	mov	r4, r1
 800131a:	2001      	movs	r0, #1
 800131c:	fb0c 3202 	mla	r2, ip, r2, r3
 8001320:	e7a8      	b.n	8001274 <_svfiprintf_r+0xd8>
 8001322:	2300      	movs	r3, #0
 8001324:	f04f 0c0a 	mov.w	ip, #10
 8001328:	4619      	mov	r1, r3
 800132a:	3401      	adds	r4, #1
 800132c:	9305      	str	r3, [sp, #20]
 800132e:	4620      	mov	r0, r4
 8001330:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001334:	3a30      	subs	r2, #48	@ 0x30
 8001336:	2a09      	cmp	r2, #9
 8001338:	d903      	bls.n	8001342 <_svfiprintf_r+0x1a6>
 800133a:	2b00      	cmp	r3, #0
 800133c:	d0c6      	beq.n	80012cc <_svfiprintf_r+0x130>
 800133e:	9105      	str	r1, [sp, #20]
 8001340:	e7c4      	b.n	80012cc <_svfiprintf_r+0x130>
 8001342:	4604      	mov	r4, r0
 8001344:	2301      	movs	r3, #1
 8001346:	fb0c 2101 	mla	r1, ip, r1, r2
 800134a:	e7f0      	b.n	800132e <_svfiprintf_r+0x192>
 800134c:	ab03      	add	r3, sp, #12
 800134e:	9300      	str	r3, [sp, #0]
 8001350:	462a      	mov	r2, r5
 8001352:	4638      	mov	r0, r7
 8001354:	4b0e      	ldr	r3, [pc, #56]	@ (8001390 <_svfiprintf_r+0x1f4>)
 8001356:	a904      	add	r1, sp, #16
 8001358:	f3af 8000 	nop.w
 800135c:	1c42      	adds	r2, r0, #1
 800135e:	4606      	mov	r6, r0
 8001360:	d1d6      	bne.n	8001310 <_svfiprintf_r+0x174>
 8001362:	89ab      	ldrh	r3, [r5, #12]
 8001364:	065b      	lsls	r3, r3, #25
 8001366:	f53f af2d 	bmi.w	80011c4 <_svfiprintf_r+0x28>
 800136a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800136c:	e72c      	b.n	80011c8 <_svfiprintf_r+0x2c>
 800136e:	ab03      	add	r3, sp, #12
 8001370:	9300      	str	r3, [sp, #0]
 8001372:	462a      	mov	r2, r5
 8001374:	4638      	mov	r0, r7
 8001376:	4b06      	ldr	r3, [pc, #24]	@ (8001390 <_svfiprintf_r+0x1f4>)
 8001378:	a904      	add	r1, sp, #16
 800137a:	f000 f87d 	bl	8001478 <_printf_i>
 800137e:	e7ed      	b.n	800135c <_svfiprintf_r+0x1c0>
 8001380:	080017f3 	.word	0x080017f3
 8001384:	080017f9 	.word	0x080017f9
 8001388:	080017fd 	.word	0x080017fd
 800138c:	00000000 	.word	0x00000000
 8001390:	080010e5 	.word	0x080010e5

08001394 <_printf_common>:
 8001394:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001398:	4616      	mov	r6, r2
 800139a:	4698      	mov	r8, r3
 800139c:	688a      	ldr	r2, [r1, #8]
 800139e:	690b      	ldr	r3, [r1, #16]
 80013a0:	4607      	mov	r7, r0
 80013a2:	4293      	cmp	r3, r2
 80013a4:	bfb8      	it	lt
 80013a6:	4613      	movlt	r3, r2
 80013a8:	6033      	str	r3, [r6, #0]
 80013aa:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80013ae:	460c      	mov	r4, r1
 80013b0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80013b4:	b10a      	cbz	r2, 80013ba <_printf_common+0x26>
 80013b6:	3301      	adds	r3, #1
 80013b8:	6033      	str	r3, [r6, #0]
 80013ba:	6823      	ldr	r3, [r4, #0]
 80013bc:	0699      	lsls	r1, r3, #26
 80013be:	bf42      	ittt	mi
 80013c0:	6833      	ldrmi	r3, [r6, #0]
 80013c2:	3302      	addmi	r3, #2
 80013c4:	6033      	strmi	r3, [r6, #0]
 80013c6:	6825      	ldr	r5, [r4, #0]
 80013c8:	f015 0506 	ands.w	r5, r5, #6
 80013cc:	d106      	bne.n	80013dc <_printf_common+0x48>
 80013ce:	f104 0a19 	add.w	sl, r4, #25
 80013d2:	68e3      	ldr	r3, [r4, #12]
 80013d4:	6832      	ldr	r2, [r6, #0]
 80013d6:	1a9b      	subs	r3, r3, r2
 80013d8:	42ab      	cmp	r3, r5
 80013da:	dc2b      	bgt.n	8001434 <_printf_common+0xa0>
 80013dc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80013e0:	6822      	ldr	r2, [r4, #0]
 80013e2:	3b00      	subs	r3, #0
 80013e4:	bf18      	it	ne
 80013e6:	2301      	movne	r3, #1
 80013e8:	0692      	lsls	r2, r2, #26
 80013ea:	d430      	bmi.n	800144e <_printf_common+0xba>
 80013ec:	4641      	mov	r1, r8
 80013ee:	4638      	mov	r0, r7
 80013f0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80013f4:	47c8      	blx	r9
 80013f6:	3001      	adds	r0, #1
 80013f8:	d023      	beq.n	8001442 <_printf_common+0xae>
 80013fa:	6823      	ldr	r3, [r4, #0]
 80013fc:	6922      	ldr	r2, [r4, #16]
 80013fe:	f003 0306 	and.w	r3, r3, #6
 8001402:	2b04      	cmp	r3, #4
 8001404:	bf14      	ite	ne
 8001406:	2500      	movne	r5, #0
 8001408:	6833      	ldreq	r3, [r6, #0]
 800140a:	f04f 0600 	mov.w	r6, #0
 800140e:	bf08      	it	eq
 8001410:	68e5      	ldreq	r5, [r4, #12]
 8001412:	f104 041a 	add.w	r4, r4, #26
 8001416:	bf08      	it	eq
 8001418:	1aed      	subeq	r5, r5, r3
 800141a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800141e:	bf08      	it	eq
 8001420:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001424:	4293      	cmp	r3, r2
 8001426:	bfc4      	itt	gt
 8001428:	1a9b      	subgt	r3, r3, r2
 800142a:	18ed      	addgt	r5, r5, r3
 800142c:	42b5      	cmp	r5, r6
 800142e:	d11a      	bne.n	8001466 <_printf_common+0xd2>
 8001430:	2000      	movs	r0, #0
 8001432:	e008      	b.n	8001446 <_printf_common+0xb2>
 8001434:	2301      	movs	r3, #1
 8001436:	4652      	mov	r2, sl
 8001438:	4641      	mov	r1, r8
 800143a:	4638      	mov	r0, r7
 800143c:	47c8      	blx	r9
 800143e:	3001      	adds	r0, #1
 8001440:	d103      	bne.n	800144a <_printf_common+0xb6>
 8001442:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001446:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800144a:	3501      	adds	r5, #1
 800144c:	e7c1      	b.n	80013d2 <_printf_common+0x3e>
 800144e:	2030      	movs	r0, #48	@ 0x30
 8001450:	18e1      	adds	r1, r4, r3
 8001452:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8001456:	1c5a      	adds	r2, r3, #1
 8001458:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800145c:	4422      	add	r2, r4
 800145e:	3302      	adds	r3, #2
 8001460:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8001464:	e7c2      	b.n	80013ec <_printf_common+0x58>
 8001466:	2301      	movs	r3, #1
 8001468:	4622      	mov	r2, r4
 800146a:	4641      	mov	r1, r8
 800146c:	4638      	mov	r0, r7
 800146e:	47c8      	blx	r9
 8001470:	3001      	adds	r0, #1
 8001472:	d0e6      	beq.n	8001442 <_printf_common+0xae>
 8001474:	3601      	adds	r6, #1
 8001476:	e7d9      	b.n	800142c <_printf_common+0x98>

08001478 <_printf_i>:
 8001478:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800147c:	7e0f      	ldrb	r7, [r1, #24]
 800147e:	4691      	mov	r9, r2
 8001480:	2f78      	cmp	r7, #120	@ 0x78
 8001482:	4680      	mov	r8, r0
 8001484:	460c      	mov	r4, r1
 8001486:	469a      	mov	sl, r3
 8001488:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800148a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800148e:	d807      	bhi.n	80014a0 <_printf_i+0x28>
 8001490:	2f62      	cmp	r7, #98	@ 0x62
 8001492:	d80a      	bhi.n	80014aa <_printf_i+0x32>
 8001494:	2f00      	cmp	r7, #0
 8001496:	f000 80d1 	beq.w	800163c <_printf_i+0x1c4>
 800149a:	2f58      	cmp	r7, #88	@ 0x58
 800149c:	f000 80b8 	beq.w	8001610 <_printf_i+0x198>
 80014a0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80014a4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80014a8:	e03a      	b.n	8001520 <_printf_i+0xa8>
 80014aa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80014ae:	2b15      	cmp	r3, #21
 80014b0:	d8f6      	bhi.n	80014a0 <_printf_i+0x28>
 80014b2:	a101      	add	r1, pc, #4	@ (adr r1, 80014b8 <_printf_i+0x40>)
 80014b4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80014b8:	08001511 	.word	0x08001511
 80014bc:	08001525 	.word	0x08001525
 80014c0:	080014a1 	.word	0x080014a1
 80014c4:	080014a1 	.word	0x080014a1
 80014c8:	080014a1 	.word	0x080014a1
 80014cc:	080014a1 	.word	0x080014a1
 80014d0:	08001525 	.word	0x08001525
 80014d4:	080014a1 	.word	0x080014a1
 80014d8:	080014a1 	.word	0x080014a1
 80014dc:	080014a1 	.word	0x080014a1
 80014e0:	080014a1 	.word	0x080014a1
 80014e4:	08001623 	.word	0x08001623
 80014e8:	0800154f 	.word	0x0800154f
 80014ec:	080015dd 	.word	0x080015dd
 80014f0:	080014a1 	.word	0x080014a1
 80014f4:	080014a1 	.word	0x080014a1
 80014f8:	08001645 	.word	0x08001645
 80014fc:	080014a1 	.word	0x080014a1
 8001500:	0800154f 	.word	0x0800154f
 8001504:	080014a1 	.word	0x080014a1
 8001508:	080014a1 	.word	0x080014a1
 800150c:	080015e5 	.word	0x080015e5
 8001510:	6833      	ldr	r3, [r6, #0]
 8001512:	1d1a      	adds	r2, r3, #4
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	6032      	str	r2, [r6, #0]
 8001518:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800151c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8001520:	2301      	movs	r3, #1
 8001522:	e09c      	b.n	800165e <_printf_i+0x1e6>
 8001524:	6833      	ldr	r3, [r6, #0]
 8001526:	6820      	ldr	r0, [r4, #0]
 8001528:	1d19      	adds	r1, r3, #4
 800152a:	6031      	str	r1, [r6, #0]
 800152c:	0606      	lsls	r6, r0, #24
 800152e:	d501      	bpl.n	8001534 <_printf_i+0xbc>
 8001530:	681d      	ldr	r5, [r3, #0]
 8001532:	e003      	b.n	800153c <_printf_i+0xc4>
 8001534:	0645      	lsls	r5, r0, #25
 8001536:	d5fb      	bpl.n	8001530 <_printf_i+0xb8>
 8001538:	f9b3 5000 	ldrsh.w	r5, [r3]
 800153c:	2d00      	cmp	r5, #0
 800153e:	da03      	bge.n	8001548 <_printf_i+0xd0>
 8001540:	232d      	movs	r3, #45	@ 0x2d
 8001542:	426d      	negs	r5, r5
 8001544:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001548:	230a      	movs	r3, #10
 800154a:	4858      	ldr	r0, [pc, #352]	@ (80016ac <_printf_i+0x234>)
 800154c:	e011      	b.n	8001572 <_printf_i+0xfa>
 800154e:	6821      	ldr	r1, [r4, #0]
 8001550:	6833      	ldr	r3, [r6, #0]
 8001552:	0608      	lsls	r0, r1, #24
 8001554:	f853 5b04 	ldr.w	r5, [r3], #4
 8001558:	d402      	bmi.n	8001560 <_printf_i+0xe8>
 800155a:	0649      	lsls	r1, r1, #25
 800155c:	bf48      	it	mi
 800155e:	b2ad      	uxthmi	r5, r5
 8001560:	2f6f      	cmp	r7, #111	@ 0x6f
 8001562:	6033      	str	r3, [r6, #0]
 8001564:	bf14      	ite	ne
 8001566:	230a      	movne	r3, #10
 8001568:	2308      	moveq	r3, #8
 800156a:	4850      	ldr	r0, [pc, #320]	@ (80016ac <_printf_i+0x234>)
 800156c:	2100      	movs	r1, #0
 800156e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8001572:	6866      	ldr	r6, [r4, #4]
 8001574:	2e00      	cmp	r6, #0
 8001576:	60a6      	str	r6, [r4, #8]
 8001578:	db05      	blt.n	8001586 <_printf_i+0x10e>
 800157a:	6821      	ldr	r1, [r4, #0]
 800157c:	432e      	orrs	r6, r5
 800157e:	f021 0104 	bic.w	r1, r1, #4
 8001582:	6021      	str	r1, [r4, #0]
 8001584:	d04b      	beq.n	800161e <_printf_i+0x1a6>
 8001586:	4616      	mov	r6, r2
 8001588:	fbb5 f1f3 	udiv	r1, r5, r3
 800158c:	fb03 5711 	mls	r7, r3, r1, r5
 8001590:	5dc7      	ldrb	r7, [r0, r7]
 8001592:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8001596:	462f      	mov	r7, r5
 8001598:	42bb      	cmp	r3, r7
 800159a:	460d      	mov	r5, r1
 800159c:	d9f4      	bls.n	8001588 <_printf_i+0x110>
 800159e:	2b08      	cmp	r3, #8
 80015a0:	d10b      	bne.n	80015ba <_printf_i+0x142>
 80015a2:	6823      	ldr	r3, [r4, #0]
 80015a4:	07df      	lsls	r7, r3, #31
 80015a6:	d508      	bpl.n	80015ba <_printf_i+0x142>
 80015a8:	6923      	ldr	r3, [r4, #16]
 80015aa:	6861      	ldr	r1, [r4, #4]
 80015ac:	4299      	cmp	r1, r3
 80015ae:	bfde      	ittt	le
 80015b0:	2330      	movle	r3, #48	@ 0x30
 80015b2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80015b6:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80015ba:	1b92      	subs	r2, r2, r6
 80015bc:	6122      	str	r2, [r4, #16]
 80015be:	464b      	mov	r3, r9
 80015c0:	4621      	mov	r1, r4
 80015c2:	4640      	mov	r0, r8
 80015c4:	f8cd a000 	str.w	sl, [sp]
 80015c8:	aa03      	add	r2, sp, #12
 80015ca:	f7ff fee3 	bl	8001394 <_printf_common>
 80015ce:	3001      	adds	r0, #1
 80015d0:	d14a      	bne.n	8001668 <_printf_i+0x1f0>
 80015d2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80015d6:	b004      	add	sp, #16
 80015d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80015dc:	6823      	ldr	r3, [r4, #0]
 80015de:	f043 0320 	orr.w	r3, r3, #32
 80015e2:	6023      	str	r3, [r4, #0]
 80015e4:	2778      	movs	r7, #120	@ 0x78
 80015e6:	4832      	ldr	r0, [pc, #200]	@ (80016b0 <_printf_i+0x238>)
 80015e8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80015ec:	6823      	ldr	r3, [r4, #0]
 80015ee:	6831      	ldr	r1, [r6, #0]
 80015f0:	061f      	lsls	r7, r3, #24
 80015f2:	f851 5b04 	ldr.w	r5, [r1], #4
 80015f6:	d402      	bmi.n	80015fe <_printf_i+0x186>
 80015f8:	065f      	lsls	r7, r3, #25
 80015fa:	bf48      	it	mi
 80015fc:	b2ad      	uxthmi	r5, r5
 80015fe:	6031      	str	r1, [r6, #0]
 8001600:	07d9      	lsls	r1, r3, #31
 8001602:	bf44      	itt	mi
 8001604:	f043 0320 	orrmi.w	r3, r3, #32
 8001608:	6023      	strmi	r3, [r4, #0]
 800160a:	b11d      	cbz	r5, 8001614 <_printf_i+0x19c>
 800160c:	2310      	movs	r3, #16
 800160e:	e7ad      	b.n	800156c <_printf_i+0xf4>
 8001610:	4826      	ldr	r0, [pc, #152]	@ (80016ac <_printf_i+0x234>)
 8001612:	e7e9      	b.n	80015e8 <_printf_i+0x170>
 8001614:	6823      	ldr	r3, [r4, #0]
 8001616:	f023 0320 	bic.w	r3, r3, #32
 800161a:	6023      	str	r3, [r4, #0]
 800161c:	e7f6      	b.n	800160c <_printf_i+0x194>
 800161e:	4616      	mov	r6, r2
 8001620:	e7bd      	b.n	800159e <_printf_i+0x126>
 8001622:	6833      	ldr	r3, [r6, #0]
 8001624:	6825      	ldr	r5, [r4, #0]
 8001626:	1d18      	adds	r0, r3, #4
 8001628:	6961      	ldr	r1, [r4, #20]
 800162a:	6030      	str	r0, [r6, #0]
 800162c:	062e      	lsls	r6, r5, #24
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	d501      	bpl.n	8001636 <_printf_i+0x1be>
 8001632:	6019      	str	r1, [r3, #0]
 8001634:	e002      	b.n	800163c <_printf_i+0x1c4>
 8001636:	0668      	lsls	r0, r5, #25
 8001638:	d5fb      	bpl.n	8001632 <_printf_i+0x1ba>
 800163a:	8019      	strh	r1, [r3, #0]
 800163c:	2300      	movs	r3, #0
 800163e:	4616      	mov	r6, r2
 8001640:	6123      	str	r3, [r4, #16]
 8001642:	e7bc      	b.n	80015be <_printf_i+0x146>
 8001644:	6833      	ldr	r3, [r6, #0]
 8001646:	2100      	movs	r1, #0
 8001648:	1d1a      	adds	r2, r3, #4
 800164a:	6032      	str	r2, [r6, #0]
 800164c:	681e      	ldr	r6, [r3, #0]
 800164e:	6862      	ldr	r2, [r4, #4]
 8001650:	4630      	mov	r0, r6
 8001652:	f000 f859 	bl	8001708 <memchr>
 8001656:	b108      	cbz	r0, 800165c <_printf_i+0x1e4>
 8001658:	1b80      	subs	r0, r0, r6
 800165a:	6060      	str	r0, [r4, #4]
 800165c:	6863      	ldr	r3, [r4, #4]
 800165e:	6123      	str	r3, [r4, #16]
 8001660:	2300      	movs	r3, #0
 8001662:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001666:	e7aa      	b.n	80015be <_printf_i+0x146>
 8001668:	4632      	mov	r2, r6
 800166a:	4649      	mov	r1, r9
 800166c:	4640      	mov	r0, r8
 800166e:	6923      	ldr	r3, [r4, #16]
 8001670:	47d0      	blx	sl
 8001672:	3001      	adds	r0, #1
 8001674:	d0ad      	beq.n	80015d2 <_printf_i+0x15a>
 8001676:	6823      	ldr	r3, [r4, #0]
 8001678:	079b      	lsls	r3, r3, #30
 800167a:	d413      	bmi.n	80016a4 <_printf_i+0x22c>
 800167c:	68e0      	ldr	r0, [r4, #12]
 800167e:	9b03      	ldr	r3, [sp, #12]
 8001680:	4298      	cmp	r0, r3
 8001682:	bfb8      	it	lt
 8001684:	4618      	movlt	r0, r3
 8001686:	e7a6      	b.n	80015d6 <_printf_i+0x15e>
 8001688:	2301      	movs	r3, #1
 800168a:	4632      	mov	r2, r6
 800168c:	4649      	mov	r1, r9
 800168e:	4640      	mov	r0, r8
 8001690:	47d0      	blx	sl
 8001692:	3001      	adds	r0, #1
 8001694:	d09d      	beq.n	80015d2 <_printf_i+0x15a>
 8001696:	3501      	adds	r5, #1
 8001698:	68e3      	ldr	r3, [r4, #12]
 800169a:	9903      	ldr	r1, [sp, #12]
 800169c:	1a5b      	subs	r3, r3, r1
 800169e:	42ab      	cmp	r3, r5
 80016a0:	dcf2      	bgt.n	8001688 <_printf_i+0x210>
 80016a2:	e7eb      	b.n	800167c <_printf_i+0x204>
 80016a4:	2500      	movs	r5, #0
 80016a6:	f104 0619 	add.w	r6, r4, #25
 80016aa:	e7f5      	b.n	8001698 <_printf_i+0x220>
 80016ac:	08001804 	.word	0x08001804
 80016b0:	08001815 	.word	0x08001815

080016b4 <memmove>:
 80016b4:	4288      	cmp	r0, r1
 80016b6:	b510      	push	{r4, lr}
 80016b8:	eb01 0402 	add.w	r4, r1, r2
 80016bc:	d902      	bls.n	80016c4 <memmove+0x10>
 80016be:	4284      	cmp	r4, r0
 80016c0:	4623      	mov	r3, r4
 80016c2:	d807      	bhi.n	80016d4 <memmove+0x20>
 80016c4:	1e43      	subs	r3, r0, #1
 80016c6:	42a1      	cmp	r1, r4
 80016c8:	d008      	beq.n	80016dc <memmove+0x28>
 80016ca:	f811 2b01 	ldrb.w	r2, [r1], #1
 80016ce:	f803 2f01 	strb.w	r2, [r3, #1]!
 80016d2:	e7f8      	b.n	80016c6 <memmove+0x12>
 80016d4:	4601      	mov	r1, r0
 80016d6:	4402      	add	r2, r0
 80016d8:	428a      	cmp	r2, r1
 80016da:	d100      	bne.n	80016de <memmove+0x2a>
 80016dc:	bd10      	pop	{r4, pc}
 80016de:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80016e2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80016e6:	e7f7      	b.n	80016d8 <memmove+0x24>

080016e8 <_sbrk_r>:
 80016e8:	b538      	push	{r3, r4, r5, lr}
 80016ea:	2300      	movs	r3, #0
 80016ec:	4d05      	ldr	r5, [pc, #20]	@ (8001704 <_sbrk_r+0x1c>)
 80016ee:	4604      	mov	r4, r0
 80016f0:	4608      	mov	r0, r1
 80016f2:	602b      	str	r3, [r5, #0]
 80016f4:	f7ff fb52 	bl	8000d9c <_sbrk>
 80016f8:	1c43      	adds	r3, r0, #1
 80016fa:	d102      	bne.n	8001702 <_sbrk_r+0x1a>
 80016fc:	682b      	ldr	r3, [r5, #0]
 80016fe:	b103      	cbz	r3, 8001702 <_sbrk_r+0x1a>
 8001700:	6023      	str	r3, [r4, #0]
 8001702:	bd38      	pop	{r3, r4, r5, pc}
 8001704:	200001c8 	.word	0x200001c8

08001708 <memchr>:
 8001708:	4603      	mov	r3, r0
 800170a:	b510      	push	{r4, lr}
 800170c:	b2c9      	uxtb	r1, r1
 800170e:	4402      	add	r2, r0
 8001710:	4293      	cmp	r3, r2
 8001712:	4618      	mov	r0, r3
 8001714:	d101      	bne.n	800171a <memchr+0x12>
 8001716:	2000      	movs	r0, #0
 8001718:	e003      	b.n	8001722 <memchr+0x1a>
 800171a:	7804      	ldrb	r4, [r0, #0]
 800171c:	3301      	adds	r3, #1
 800171e:	428c      	cmp	r4, r1
 8001720:	d1f6      	bne.n	8001710 <memchr+0x8>
 8001722:	bd10      	pop	{r4, pc}

08001724 <memcpy>:
 8001724:	440a      	add	r2, r1
 8001726:	4291      	cmp	r1, r2
 8001728:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800172c:	d100      	bne.n	8001730 <memcpy+0xc>
 800172e:	4770      	bx	lr
 8001730:	b510      	push	{r4, lr}
 8001732:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001736:	4291      	cmp	r1, r2
 8001738:	f803 4f01 	strb.w	r4, [r3, #1]!
 800173c:	d1f9      	bne.n	8001732 <memcpy+0xe>
 800173e:	bd10      	pop	{r4, pc}

08001740 <_realloc_r>:
 8001740:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001744:	4607      	mov	r7, r0
 8001746:	4614      	mov	r4, r2
 8001748:	460d      	mov	r5, r1
 800174a:	b921      	cbnz	r1, 8001756 <_realloc_r+0x16>
 800174c:	4611      	mov	r1, r2
 800174e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001752:	f7ff bc3b 	b.w	8000fcc <_malloc_r>
 8001756:	b92a      	cbnz	r2, 8001764 <_realloc_r+0x24>
 8001758:	f7ff fbce 	bl	8000ef8 <_free_r>
 800175c:	4625      	mov	r5, r4
 800175e:	4628      	mov	r0, r5
 8001760:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001764:	f000 f81a 	bl	800179c <_malloc_usable_size_r>
 8001768:	4284      	cmp	r4, r0
 800176a:	4606      	mov	r6, r0
 800176c:	d802      	bhi.n	8001774 <_realloc_r+0x34>
 800176e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8001772:	d8f4      	bhi.n	800175e <_realloc_r+0x1e>
 8001774:	4621      	mov	r1, r4
 8001776:	4638      	mov	r0, r7
 8001778:	f7ff fc28 	bl	8000fcc <_malloc_r>
 800177c:	4680      	mov	r8, r0
 800177e:	b908      	cbnz	r0, 8001784 <_realloc_r+0x44>
 8001780:	4645      	mov	r5, r8
 8001782:	e7ec      	b.n	800175e <_realloc_r+0x1e>
 8001784:	42b4      	cmp	r4, r6
 8001786:	4622      	mov	r2, r4
 8001788:	4629      	mov	r1, r5
 800178a:	bf28      	it	cs
 800178c:	4632      	movcs	r2, r6
 800178e:	f7ff ffc9 	bl	8001724 <memcpy>
 8001792:	4629      	mov	r1, r5
 8001794:	4638      	mov	r0, r7
 8001796:	f7ff fbaf 	bl	8000ef8 <_free_r>
 800179a:	e7f1      	b.n	8001780 <_realloc_r+0x40>

0800179c <_malloc_usable_size_r>:
 800179c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80017a0:	1f18      	subs	r0, r3, #4
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	bfbc      	itt	lt
 80017a6:	580b      	ldrlt	r3, [r1, r0]
 80017a8:	18c0      	addlt	r0, r0, r3
 80017aa:	4770      	bx	lr

080017ac <_init>:
 80017ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017ae:	bf00      	nop
 80017b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80017b2:	bc08      	pop	{r3}
 80017b4:	469e      	mov	lr, r3
 80017b6:	4770      	bx	lr

080017b8 <_fini>:
 80017b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017ba:	bf00      	nop
 80017bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80017be:	bc08      	pop	{r3}
 80017c0:	469e      	mov	lr, r3
 80017c2:	4770      	bx	lr
